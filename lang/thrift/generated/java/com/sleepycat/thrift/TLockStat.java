/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-25")
public class TLockStat implements org.apache.thrift.TBase<TLockStat, TLockStat._Fields>, java.io.Serializable, Cloneable, Comparable<TLockStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLockStat");

  private static final org.apache.thrift.protocol.TField CUR_MAX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("curMaxId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HASH_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("hashLen", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INITLOCKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("initlockers", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField INITLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("initlocks", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INITOBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("initobjects", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LOCKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("lockers", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LOCKERS_NOWAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lockersNowait", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LOCKERS_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lockersWait", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LOCK_NOWAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lockNowait", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField LOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("locks", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LOCKSTEALS_FIELD_DESC = new org.apache.thrift.protocol.TField("locksteals", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField LOCK_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("lockTimeout", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LOCK_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lockWait", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField MAX_HLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxHlocks", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField MAX_HOBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxHobjects", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MAX_LOCKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLockers", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MAX_LOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLocks", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField MAX_LSTEALS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLsteals", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField MAX_NLOCKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNlockers", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField MAX_NLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNlocks", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField MAX_NOBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNobjects", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField MAX_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxObjects", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField MAX_OSTEALS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxOsteals", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField NUM_DEADLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("numDeadlocks", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField NUM_DOWNGRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("numDowngrade", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField NUM_LOCKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numLockers", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField NUM_LOCKERS_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("numLockersHit", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField NUM_LOCKERS_REUSED_FIELD_DESC = new org.apache.thrift.protocol.TField("numLockersReused", org.apache.thrift.protocol.TType.I64, (short)29);
  private static final org.apache.thrift.protocol.TField NUM_LOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("numLocks", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField NUM_LOCK_TIMEOUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("numLockTimeouts", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField NUM_MODES_FIELD_DESC = new org.apache.thrift.protocol.TField("numModes", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField NOBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("nobjects", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField NUM_RELEASES_FIELD_DESC = new org.apache.thrift.protocol.TField("numReleases", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField NUM_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("numRequests", org.apache.thrift.protocol.TType.I64, (short)35);
  private static final org.apache.thrift.protocol.TField NUM_TXN_TIMEOUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("numTxnTimeouts", org.apache.thrift.protocol.TType.I64, (short)36);
  private static final org.apache.thrift.protocol.TField NUM_UPGRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("numUpgrade", org.apache.thrift.protocol.TType.I64, (short)37);
  private static final org.apache.thrift.protocol.TField OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("objects", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField OBJECTSTEALS_FIELD_DESC = new org.apache.thrift.protocol.TField("objectsteals", org.apache.thrift.protocol.TType.I64, (short)39);
  private static final org.apache.thrift.protocol.TField OBJS_NOWAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("objsNowait", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField OBJS_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("objsWait", org.apache.thrift.protocol.TType.I64, (short)41);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField PART_MAX_NOWAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("partMaxNowait", org.apache.thrift.protocol.TType.I64, (short)43);
  private static final org.apache.thrift.protocol.TField PART_MAX_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("partMaxWait", org.apache.thrift.protocol.TType.I64, (short)44);
  private static final org.apache.thrift.protocol.TField PART_NOWAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("partNowait", org.apache.thrift.protocol.TType.I64, (short)45);
  private static final org.apache.thrift.protocol.TField PART_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("partWait", org.apache.thrift.protocol.TType.I64, (short)46);
  private static final org.apache.thrift.protocol.TField REGION_NOWAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("regionNowait", org.apache.thrift.protocol.TType.I64, (short)47);
  private static final org.apache.thrift.protocol.TField REGION_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("regionWait", org.apache.thrift.protocol.TType.I64, (short)48);
  private static final org.apache.thrift.protocol.TField REG_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("regSize", org.apache.thrift.protocol.TType.I64, (short)49);
  private static final org.apache.thrift.protocol.TField TABLE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("tableSize", org.apache.thrift.protocol.TType.I32, (short)50);
  private static final org.apache.thrift.protocol.TField TXN_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("txnTimeout", org.apache.thrift.protocol.TType.I32, (short)51);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TLockStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TLockStatTupleSchemeFactory();

  public int curMaxId; // required
  public int hashLen; // required
  public int id; // required
  public int initlockers; // required
  public int initlocks; // required
  public int initobjects; // required
  public int lockers; // required
  public long lockersNowait; // required
  public long lockersWait; // required
  public long lockNowait; // required
  public int locks; // required
  public long locksteals; // required
  public int lockTimeout; // required
  public long lockWait; // required
  public int maxHlocks; // required
  public int maxHobjects; // required
  public int maxLockers; // required
  public int maxLocks; // required
  public long maxLsteals; // required
  public int maxNlockers; // required
  public int maxNlocks; // required
  public int maxNobjects; // required
  public int maxObjects; // required
  public long maxOsteals; // required
  public long numDeadlocks; // required
  public long numDowngrade; // required
  public int numLockers; // required
  public long numLockersHit; // required
  public long numLockersReused; // required
  public int numLocks; // required
  public long numLockTimeouts; // required
  public int numModes; // required
  public int nobjects; // required
  public long numReleases; // required
  public long numRequests; // required
  public long numTxnTimeouts; // required
  public long numUpgrade; // required
  public int objects; // required
  public long objectsteals; // required
  public long objsNowait; // required
  public long objsWait; // required
  public int partitions; // required
  public long partMaxNowait; // required
  public long partMaxWait; // required
  public long partNowait; // required
  public long partWait; // required
  public long regionNowait; // required
  public long regionWait; // required
  public long regSize; // required
  public int tableSize; // required
  public int txnTimeout; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUR_MAX_ID((short)1, "curMaxId"),
    HASH_LEN((short)2, "hashLen"),
    ID((short)3, "id"),
    INITLOCKERS((short)4, "initlockers"),
    INITLOCKS((short)5, "initlocks"),
    INITOBJECTS((short)6, "initobjects"),
    LOCKERS((short)7, "lockers"),
    LOCKERS_NOWAIT((short)8, "lockersNowait"),
    LOCKERS_WAIT((short)9, "lockersWait"),
    LOCK_NOWAIT((short)10, "lockNowait"),
    LOCKS((short)11, "locks"),
    LOCKSTEALS((short)12, "locksteals"),
    LOCK_TIMEOUT((short)13, "lockTimeout"),
    LOCK_WAIT((short)14, "lockWait"),
    MAX_HLOCKS((short)15, "maxHlocks"),
    MAX_HOBJECTS((short)16, "maxHobjects"),
    MAX_LOCKERS((short)17, "maxLockers"),
    MAX_LOCKS((short)18, "maxLocks"),
    MAX_LSTEALS((short)19, "maxLsteals"),
    MAX_NLOCKERS((short)20, "maxNlockers"),
    MAX_NLOCKS((short)21, "maxNlocks"),
    MAX_NOBJECTS((short)22, "maxNobjects"),
    MAX_OBJECTS((short)23, "maxObjects"),
    MAX_OSTEALS((short)24, "maxOsteals"),
    NUM_DEADLOCKS((short)25, "numDeadlocks"),
    NUM_DOWNGRADE((short)26, "numDowngrade"),
    NUM_LOCKERS((short)27, "numLockers"),
    NUM_LOCKERS_HIT((short)28, "numLockersHit"),
    NUM_LOCKERS_REUSED((short)29, "numLockersReused"),
    NUM_LOCKS((short)30, "numLocks"),
    NUM_LOCK_TIMEOUTS((short)31, "numLockTimeouts"),
    NUM_MODES((short)32, "numModes"),
    NOBJECTS((short)33, "nobjects"),
    NUM_RELEASES((short)34, "numReleases"),
    NUM_REQUESTS((short)35, "numRequests"),
    NUM_TXN_TIMEOUTS((short)36, "numTxnTimeouts"),
    NUM_UPGRADE((short)37, "numUpgrade"),
    OBJECTS((short)38, "objects"),
    OBJECTSTEALS((short)39, "objectsteals"),
    OBJS_NOWAIT((short)40, "objsNowait"),
    OBJS_WAIT((short)41, "objsWait"),
    PARTITIONS((short)42, "partitions"),
    PART_MAX_NOWAIT((short)43, "partMaxNowait"),
    PART_MAX_WAIT((short)44, "partMaxWait"),
    PART_NOWAIT((short)45, "partNowait"),
    PART_WAIT((short)46, "partWait"),
    REGION_NOWAIT((short)47, "regionNowait"),
    REGION_WAIT((short)48, "regionWait"),
    REG_SIZE((short)49, "regSize"),
    TABLE_SIZE((short)50, "tableSize"),
    TXN_TIMEOUT((short)51, "txnTimeout");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUR_MAX_ID
          return CUR_MAX_ID;
        case 2: // HASH_LEN
          return HASH_LEN;
        case 3: // ID
          return ID;
        case 4: // INITLOCKERS
          return INITLOCKERS;
        case 5: // INITLOCKS
          return INITLOCKS;
        case 6: // INITOBJECTS
          return INITOBJECTS;
        case 7: // LOCKERS
          return LOCKERS;
        case 8: // LOCKERS_NOWAIT
          return LOCKERS_NOWAIT;
        case 9: // LOCKERS_WAIT
          return LOCKERS_WAIT;
        case 10: // LOCK_NOWAIT
          return LOCK_NOWAIT;
        case 11: // LOCKS
          return LOCKS;
        case 12: // LOCKSTEALS
          return LOCKSTEALS;
        case 13: // LOCK_TIMEOUT
          return LOCK_TIMEOUT;
        case 14: // LOCK_WAIT
          return LOCK_WAIT;
        case 15: // MAX_HLOCKS
          return MAX_HLOCKS;
        case 16: // MAX_HOBJECTS
          return MAX_HOBJECTS;
        case 17: // MAX_LOCKERS
          return MAX_LOCKERS;
        case 18: // MAX_LOCKS
          return MAX_LOCKS;
        case 19: // MAX_LSTEALS
          return MAX_LSTEALS;
        case 20: // MAX_NLOCKERS
          return MAX_NLOCKERS;
        case 21: // MAX_NLOCKS
          return MAX_NLOCKS;
        case 22: // MAX_NOBJECTS
          return MAX_NOBJECTS;
        case 23: // MAX_OBJECTS
          return MAX_OBJECTS;
        case 24: // MAX_OSTEALS
          return MAX_OSTEALS;
        case 25: // NUM_DEADLOCKS
          return NUM_DEADLOCKS;
        case 26: // NUM_DOWNGRADE
          return NUM_DOWNGRADE;
        case 27: // NUM_LOCKERS
          return NUM_LOCKERS;
        case 28: // NUM_LOCKERS_HIT
          return NUM_LOCKERS_HIT;
        case 29: // NUM_LOCKERS_REUSED
          return NUM_LOCKERS_REUSED;
        case 30: // NUM_LOCKS
          return NUM_LOCKS;
        case 31: // NUM_LOCK_TIMEOUTS
          return NUM_LOCK_TIMEOUTS;
        case 32: // NUM_MODES
          return NUM_MODES;
        case 33: // NOBJECTS
          return NOBJECTS;
        case 34: // NUM_RELEASES
          return NUM_RELEASES;
        case 35: // NUM_REQUESTS
          return NUM_REQUESTS;
        case 36: // NUM_TXN_TIMEOUTS
          return NUM_TXN_TIMEOUTS;
        case 37: // NUM_UPGRADE
          return NUM_UPGRADE;
        case 38: // OBJECTS
          return OBJECTS;
        case 39: // OBJECTSTEALS
          return OBJECTSTEALS;
        case 40: // OBJS_NOWAIT
          return OBJS_NOWAIT;
        case 41: // OBJS_WAIT
          return OBJS_WAIT;
        case 42: // PARTITIONS
          return PARTITIONS;
        case 43: // PART_MAX_NOWAIT
          return PART_MAX_NOWAIT;
        case 44: // PART_MAX_WAIT
          return PART_MAX_WAIT;
        case 45: // PART_NOWAIT
          return PART_NOWAIT;
        case 46: // PART_WAIT
          return PART_WAIT;
        case 47: // REGION_NOWAIT
          return REGION_NOWAIT;
        case 48: // REGION_WAIT
          return REGION_WAIT;
        case 49: // REG_SIZE
          return REG_SIZE;
        case 50: // TABLE_SIZE
          return TABLE_SIZE;
        case 51: // TXN_TIMEOUT
          return TXN_TIMEOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURMAXID_ISSET_ID = 0;
  private static final int __HASHLEN_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __INITLOCKERS_ISSET_ID = 3;
  private static final int __INITLOCKS_ISSET_ID = 4;
  private static final int __INITOBJECTS_ISSET_ID = 5;
  private static final int __LOCKERS_ISSET_ID = 6;
  private static final int __LOCKERSNOWAIT_ISSET_ID = 7;
  private static final int __LOCKERSWAIT_ISSET_ID = 8;
  private static final int __LOCKNOWAIT_ISSET_ID = 9;
  private static final int __LOCKS_ISSET_ID = 10;
  private static final int __LOCKSTEALS_ISSET_ID = 11;
  private static final int __LOCKTIMEOUT_ISSET_ID = 12;
  private static final int __LOCKWAIT_ISSET_ID = 13;
  private static final int __MAXHLOCKS_ISSET_ID = 14;
  private static final int __MAXHOBJECTS_ISSET_ID = 15;
  private static final int __MAXLOCKERS_ISSET_ID = 16;
  private static final int __MAXLOCKS_ISSET_ID = 17;
  private static final int __MAXLSTEALS_ISSET_ID = 18;
  private static final int __MAXNLOCKERS_ISSET_ID = 19;
  private static final int __MAXNLOCKS_ISSET_ID = 20;
  private static final int __MAXNOBJECTS_ISSET_ID = 21;
  private static final int __MAXOBJECTS_ISSET_ID = 22;
  private static final int __MAXOSTEALS_ISSET_ID = 23;
  private static final int __NUMDEADLOCKS_ISSET_ID = 24;
  private static final int __NUMDOWNGRADE_ISSET_ID = 25;
  private static final int __NUMLOCKERS_ISSET_ID = 26;
  private static final int __NUMLOCKERSHIT_ISSET_ID = 27;
  private static final int __NUMLOCKERSREUSED_ISSET_ID = 28;
  private static final int __NUMLOCKS_ISSET_ID = 29;
  private static final int __NUMLOCKTIMEOUTS_ISSET_ID = 30;
  private static final int __NUMMODES_ISSET_ID = 31;
  private static final int __NOBJECTS_ISSET_ID = 32;
  private static final int __NUMRELEASES_ISSET_ID = 33;
  private static final int __NUMREQUESTS_ISSET_ID = 34;
  private static final int __NUMTXNTIMEOUTS_ISSET_ID = 35;
  private static final int __NUMUPGRADE_ISSET_ID = 36;
  private static final int __OBJECTS_ISSET_ID = 37;
  private static final int __OBJECTSTEALS_ISSET_ID = 38;
  private static final int __OBJSNOWAIT_ISSET_ID = 39;
  private static final int __OBJSWAIT_ISSET_ID = 40;
  private static final int __PARTITIONS_ISSET_ID = 41;
  private static final int __PARTMAXNOWAIT_ISSET_ID = 42;
  private static final int __PARTMAXWAIT_ISSET_ID = 43;
  private static final int __PARTNOWAIT_ISSET_ID = 44;
  private static final int __PARTWAIT_ISSET_ID = 45;
  private static final int __REGIONNOWAIT_ISSET_ID = 46;
  private static final int __REGIONWAIT_ISSET_ID = 47;
  private static final int __REGSIZE_ISSET_ID = 48;
  private static final int __TABLESIZE_ISSET_ID = 49;
  private static final int __TXNTIMEOUT_ISSET_ID = 50;
  private long __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUR_MAX_ID, new org.apache.thrift.meta_data.FieldMetaData("curMaxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HASH_LEN, new org.apache.thrift.meta_data.FieldMetaData("hashLen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INITLOCKERS, new org.apache.thrift.meta_data.FieldMetaData("initlockers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INITLOCKS, new org.apache.thrift.meta_data.FieldMetaData("initlocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INITOBJECTS, new org.apache.thrift.meta_data.FieldMetaData("initobjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCKERS, new org.apache.thrift.meta_data.FieldMetaData("lockers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCKERS_NOWAIT, new org.apache.thrift.meta_data.FieldMetaData("lockersNowait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCKERS_WAIT, new org.apache.thrift.meta_data.FieldMetaData("lockersWait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCK_NOWAIT, new org.apache.thrift.meta_data.FieldMetaData("lockNowait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCKS, new org.apache.thrift.meta_data.FieldMetaData("locks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCKSTEALS, new org.apache.thrift.meta_data.FieldMetaData("locksteals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCK_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("lockTimeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCK_WAIT, new org.apache.thrift.meta_data.FieldMetaData("lockWait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_HLOCKS, new org.apache.thrift.meta_data.FieldMetaData("maxHlocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_HOBJECTS, new org.apache.thrift.meta_data.FieldMetaData("maxHobjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_LOCKERS, new org.apache.thrift.meta_data.FieldMetaData("maxLockers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_LOCKS, new org.apache.thrift.meta_data.FieldMetaData("maxLocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_LSTEALS, new org.apache.thrift.meta_data.FieldMetaData("maxLsteals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_NLOCKERS, new org.apache.thrift.meta_data.FieldMetaData("maxNlockers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_NLOCKS, new org.apache.thrift.meta_data.FieldMetaData("maxNlocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_NOBJECTS, new org.apache.thrift.meta_data.FieldMetaData("maxNobjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("maxObjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_OSTEALS, new org.apache.thrift.meta_data.FieldMetaData("maxOsteals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_DEADLOCKS, new org.apache.thrift.meta_data.FieldMetaData("numDeadlocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_DOWNGRADE, new org.apache.thrift.meta_data.FieldMetaData("numDowngrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_LOCKERS, new org.apache.thrift.meta_data.FieldMetaData("numLockers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_LOCKERS_HIT, new org.apache.thrift.meta_data.FieldMetaData("numLockersHit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_LOCKERS_REUSED, new org.apache.thrift.meta_data.FieldMetaData("numLockersReused", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_LOCKS, new org.apache.thrift.meta_data.FieldMetaData("numLocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_LOCK_TIMEOUTS, new org.apache.thrift.meta_data.FieldMetaData("numLockTimeouts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_MODES, new org.apache.thrift.meta_data.FieldMetaData("numModes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOBJECTS, new org.apache.thrift.meta_data.FieldMetaData("nobjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_RELEASES, new org.apache.thrift.meta_data.FieldMetaData("numReleases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("numRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_TXN_TIMEOUTS, new org.apache.thrift.meta_data.FieldMetaData("numTxnTimeouts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_UPGRADE, new org.apache.thrift.meta_data.FieldMetaData("numUpgrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("objects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OBJECTSTEALS, new org.apache.thrift.meta_data.FieldMetaData("objectsteals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBJS_NOWAIT, new org.apache.thrift.meta_data.FieldMetaData("objsNowait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBJS_WAIT, new org.apache.thrift.meta_data.FieldMetaData("objsWait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PART_MAX_NOWAIT, new org.apache.thrift.meta_data.FieldMetaData("partMaxNowait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PART_MAX_WAIT, new org.apache.thrift.meta_data.FieldMetaData("partMaxWait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PART_NOWAIT, new org.apache.thrift.meta_data.FieldMetaData("partNowait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PART_WAIT, new org.apache.thrift.meta_data.FieldMetaData("partWait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGION_NOWAIT, new org.apache.thrift.meta_data.FieldMetaData("regionNowait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGION_WAIT, new org.apache.thrift.meta_data.FieldMetaData("regionWait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REG_SIZE, new org.apache.thrift.meta_data.FieldMetaData("regSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("tableSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TXN_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("txnTimeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLockStat.class, metaDataMap);
  }

  public TLockStat() {
  }

  public TLockStat(
    int curMaxId,
    int hashLen,
    int id,
    int initlockers,
    int initlocks,
    int initobjects,
    int lockers,
    long lockersNowait,
    long lockersWait,
    long lockNowait,
    int locks,
    long locksteals,
    int lockTimeout,
    long lockWait,
    int maxHlocks,
    int maxHobjects,
    int maxLockers,
    int maxLocks,
    long maxLsteals,
    int maxNlockers,
    int maxNlocks,
    int maxNobjects,
    int maxObjects,
    long maxOsteals,
    long numDeadlocks,
    long numDowngrade,
    int numLockers,
    long numLockersHit,
    long numLockersReused,
    int numLocks,
    long numLockTimeouts,
    int numModes,
    int nobjects,
    long numReleases,
    long numRequests,
    long numTxnTimeouts,
    long numUpgrade,
    int objects,
    long objectsteals,
    long objsNowait,
    long objsWait,
    int partitions,
    long partMaxNowait,
    long partMaxWait,
    long partNowait,
    long partWait,
    long regionNowait,
    long regionWait,
    long regSize,
    int tableSize,
    int txnTimeout)
  {
    this();
    this.curMaxId = curMaxId;
    setCurMaxIdIsSet(true);
    this.hashLen = hashLen;
    setHashLenIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.initlockers = initlockers;
    setInitlockersIsSet(true);
    this.initlocks = initlocks;
    setInitlocksIsSet(true);
    this.initobjects = initobjects;
    setInitobjectsIsSet(true);
    this.lockers = lockers;
    setLockersIsSet(true);
    this.lockersNowait = lockersNowait;
    setLockersNowaitIsSet(true);
    this.lockersWait = lockersWait;
    setLockersWaitIsSet(true);
    this.lockNowait = lockNowait;
    setLockNowaitIsSet(true);
    this.locks = locks;
    setLocksIsSet(true);
    this.locksteals = locksteals;
    setLockstealsIsSet(true);
    this.lockTimeout = lockTimeout;
    setLockTimeoutIsSet(true);
    this.lockWait = lockWait;
    setLockWaitIsSet(true);
    this.maxHlocks = maxHlocks;
    setMaxHlocksIsSet(true);
    this.maxHobjects = maxHobjects;
    setMaxHobjectsIsSet(true);
    this.maxLockers = maxLockers;
    setMaxLockersIsSet(true);
    this.maxLocks = maxLocks;
    setMaxLocksIsSet(true);
    this.maxLsteals = maxLsteals;
    setMaxLstealsIsSet(true);
    this.maxNlockers = maxNlockers;
    setMaxNlockersIsSet(true);
    this.maxNlocks = maxNlocks;
    setMaxNlocksIsSet(true);
    this.maxNobjects = maxNobjects;
    setMaxNobjectsIsSet(true);
    this.maxObjects = maxObjects;
    setMaxObjectsIsSet(true);
    this.maxOsteals = maxOsteals;
    setMaxOstealsIsSet(true);
    this.numDeadlocks = numDeadlocks;
    setNumDeadlocksIsSet(true);
    this.numDowngrade = numDowngrade;
    setNumDowngradeIsSet(true);
    this.numLockers = numLockers;
    setNumLockersIsSet(true);
    this.numLockersHit = numLockersHit;
    setNumLockersHitIsSet(true);
    this.numLockersReused = numLockersReused;
    setNumLockersReusedIsSet(true);
    this.numLocks = numLocks;
    setNumLocksIsSet(true);
    this.numLockTimeouts = numLockTimeouts;
    setNumLockTimeoutsIsSet(true);
    this.numModes = numModes;
    setNumModesIsSet(true);
    this.nobjects = nobjects;
    setNobjectsIsSet(true);
    this.numReleases = numReleases;
    setNumReleasesIsSet(true);
    this.numRequests = numRequests;
    setNumRequestsIsSet(true);
    this.numTxnTimeouts = numTxnTimeouts;
    setNumTxnTimeoutsIsSet(true);
    this.numUpgrade = numUpgrade;
    setNumUpgradeIsSet(true);
    this.objects = objects;
    setObjectsIsSet(true);
    this.objectsteals = objectsteals;
    setObjectstealsIsSet(true);
    this.objsNowait = objsNowait;
    setObjsNowaitIsSet(true);
    this.objsWait = objsWait;
    setObjsWaitIsSet(true);
    this.partitions = partitions;
    setPartitionsIsSet(true);
    this.partMaxNowait = partMaxNowait;
    setPartMaxNowaitIsSet(true);
    this.partMaxWait = partMaxWait;
    setPartMaxWaitIsSet(true);
    this.partNowait = partNowait;
    setPartNowaitIsSet(true);
    this.partWait = partWait;
    setPartWaitIsSet(true);
    this.regionNowait = regionNowait;
    setRegionNowaitIsSet(true);
    this.regionWait = regionWait;
    setRegionWaitIsSet(true);
    this.regSize = regSize;
    setRegSizeIsSet(true);
    this.tableSize = tableSize;
    setTableSizeIsSet(true);
    this.txnTimeout = txnTimeout;
    setTxnTimeoutIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLockStat(TLockStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.curMaxId = other.curMaxId;
    this.hashLen = other.hashLen;
    this.id = other.id;
    this.initlockers = other.initlockers;
    this.initlocks = other.initlocks;
    this.initobjects = other.initobjects;
    this.lockers = other.lockers;
    this.lockersNowait = other.lockersNowait;
    this.lockersWait = other.lockersWait;
    this.lockNowait = other.lockNowait;
    this.locks = other.locks;
    this.locksteals = other.locksteals;
    this.lockTimeout = other.lockTimeout;
    this.lockWait = other.lockWait;
    this.maxHlocks = other.maxHlocks;
    this.maxHobjects = other.maxHobjects;
    this.maxLockers = other.maxLockers;
    this.maxLocks = other.maxLocks;
    this.maxLsteals = other.maxLsteals;
    this.maxNlockers = other.maxNlockers;
    this.maxNlocks = other.maxNlocks;
    this.maxNobjects = other.maxNobjects;
    this.maxObjects = other.maxObjects;
    this.maxOsteals = other.maxOsteals;
    this.numDeadlocks = other.numDeadlocks;
    this.numDowngrade = other.numDowngrade;
    this.numLockers = other.numLockers;
    this.numLockersHit = other.numLockersHit;
    this.numLockersReused = other.numLockersReused;
    this.numLocks = other.numLocks;
    this.numLockTimeouts = other.numLockTimeouts;
    this.numModes = other.numModes;
    this.nobjects = other.nobjects;
    this.numReleases = other.numReleases;
    this.numRequests = other.numRequests;
    this.numTxnTimeouts = other.numTxnTimeouts;
    this.numUpgrade = other.numUpgrade;
    this.objects = other.objects;
    this.objectsteals = other.objectsteals;
    this.objsNowait = other.objsNowait;
    this.objsWait = other.objsWait;
    this.partitions = other.partitions;
    this.partMaxNowait = other.partMaxNowait;
    this.partMaxWait = other.partMaxWait;
    this.partNowait = other.partNowait;
    this.partWait = other.partWait;
    this.regionNowait = other.regionNowait;
    this.regionWait = other.regionWait;
    this.regSize = other.regSize;
    this.tableSize = other.tableSize;
    this.txnTimeout = other.txnTimeout;
  }

  public TLockStat deepCopy() {
    return new TLockStat(this);
  }

  @Override
  public void clear() {
    setCurMaxIdIsSet(false);
    this.curMaxId = 0;
    setHashLenIsSet(false);
    this.hashLen = 0;
    setIdIsSet(false);
    this.id = 0;
    setInitlockersIsSet(false);
    this.initlockers = 0;
    setInitlocksIsSet(false);
    this.initlocks = 0;
    setInitobjectsIsSet(false);
    this.initobjects = 0;
    setLockersIsSet(false);
    this.lockers = 0;
    setLockersNowaitIsSet(false);
    this.lockersNowait = 0;
    setLockersWaitIsSet(false);
    this.lockersWait = 0;
    setLockNowaitIsSet(false);
    this.lockNowait = 0;
    setLocksIsSet(false);
    this.locks = 0;
    setLockstealsIsSet(false);
    this.locksteals = 0;
    setLockTimeoutIsSet(false);
    this.lockTimeout = 0;
    setLockWaitIsSet(false);
    this.lockWait = 0;
    setMaxHlocksIsSet(false);
    this.maxHlocks = 0;
    setMaxHobjectsIsSet(false);
    this.maxHobjects = 0;
    setMaxLockersIsSet(false);
    this.maxLockers = 0;
    setMaxLocksIsSet(false);
    this.maxLocks = 0;
    setMaxLstealsIsSet(false);
    this.maxLsteals = 0;
    setMaxNlockersIsSet(false);
    this.maxNlockers = 0;
    setMaxNlocksIsSet(false);
    this.maxNlocks = 0;
    setMaxNobjectsIsSet(false);
    this.maxNobjects = 0;
    setMaxObjectsIsSet(false);
    this.maxObjects = 0;
    setMaxOstealsIsSet(false);
    this.maxOsteals = 0;
    setNumDeadlocksIsSet(false);
    this.numDeadlocks = 0;
    setNumDowngradeIsSet(false);
    this.numDowngrade = 0;
    setNumLockersIsSet(false);
    this.numLockers = 0;
    setNumLockersHitIsSet(false);
    this.numLockersHit = 0;
    setNumLockersReusedIsSet(false);
    this.numLockersReused = 0;
    setNumLocksIsSet(false);
    this.numLocks = 0;
    setNumLockTimeoutsIsSet(false);
    this.numLockTimeouts = 0;
    setNumModesIsSet(false);
    this.numModes = 0;
    setNobjectsIsSet(false);
    this.nobjects = 0;
    setNumReleasesIsSet(false);
    this.numReleases = 0;
    setNumRequestsIsSet(false);
    this.numRequests = 0;
    setNumTxnTimeoutsIsSet(false);
    this.numTxnTimeouts = 0;
    setNumUpgradeIsSet(false);
    this.numUpgrade = 0;
    setObjectsIsSet(false);
    this.objects = 0;
    setObjectstealsIsSet(false);
    this.objectsteals = 0;
    setObjsNowaitIsSet(false);
    this.objsNowait = 0;
    setObjsWaitIsSet(false);
    this.objsWait = 0;
    setPartitionsIsSet(false);
    this.partitions = 0;
    setPartMaxNowaitIsSet(false);
    this.partMaxNowait = 0;
    setPartMaxWaitIsSet(false);
    this.partMaxWait = 0;
    setPartNowaitIsSet(false);
    this.partNowait = 0;
    setPartWaitIsSet(false);
    this.partWait = 0;
    setRegionNowaitIsSet(false);
    this.regionNowait = 0;
    setRegionWaitIsSet(false);
    this.regionWait = 0;
    setRegSizeIsSet(false);
    this.regSize = 0;
    setTableSizeIsSet(false);
    this.tableSize = 0;
    setTxnTimeoutIsSet(false);
    this.txnTimeout = 0;
  }

  public int getCurMaxId() {
    return this.curMaxId;
  }

  public TLockStat setCurMaxId(int curMaxId) {
    this.curMaxId = curMaxId;
    setCurMaxIdIsSet(true);
    return this;
  }

  public void unsetCurMaxId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURMAXID_ISSET_ID);
  }

  /** Returns true if field curMaxId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurMaxId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURMAXID_ISSET_ID);
  }

  public void setCurMaxIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURMAXID_ISSET_ID, value);
  }

  public int getHashLen() {
    return this.hashLen;
  }

  public TLockStat setHashLen(int hashLen) {
    this.hashLen = hashLen;
    setHashLenIsSet(true);
    return this;
  }

  public void unsetHashLen() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASHLEN_ISSET_ID);
  }

  /** Returns true if field hashLen is set (has been assigned a value) and false otherwise */
  public boolean isSetHashLen() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASHLEN_ISSET_ID);
  }

  public void setHashLenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASHLEN_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public TLockStat setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getInitlockers() {
    return this.initlockers;
  }

  public TLockStat setInitlockers(int initlockers) {
    this.initlockers = initlockers;
    setInitlockersIsSet(true);
    return this;
  }

  public void unsetInitlockers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INITLOCKERS_ISSET_ID);
  }

  /** Returns true if field initlockers is set (has been assigned a value) and false otherwise */
  public boolean isSetInitlockers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INITLOCKERS_ISSET_ID);
  }

  public void setInitlockersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INITLOCKERS_ISSET_ID, value);
  }

  public int getInitlocks() {
    return this.initlocks;
  }

  public TLockStat setInitlocks(int initlocks) {
    this.initlocks = initlocks;
    setInitlocksIsSet(true);
    return this;
  }

  public void unsetInitlocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INITLOCKS_ISSET_ID);
  }

  /** Returns true if field initlocks is set (has been assigned a value) and false otherwise */
  public boolean isSetInitlocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INITLOCKS_ISSET_ID);
  }

  public void setInitlocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INITLOCKS_ISSET_ID, value);
  }

  public int getInitobjects() {
    return this.initobjects;
  }

  public TLockStat setInitobjects(int initobjects) {
    this.initobjects = initobjects;
    setInitobjectsIsSet(true);
    return this;
  }

  public void unsetInitobjects() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INITOBJECTS_ISSET_ID);
  }

  /** Returns true if field initobjects is set (has been assigned a value) and false otherwise */
  public boolean isSetInitobjects() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INITOBJECTS_ISSET_ID);
  }

  public void setInitobjectsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INITOBJECTS_ISSET_ID, value);
  }

  public int getLockers() {
    return this.lockers;
  }

  public TLockStat setLockers(int lockers) {
    this.lockers = lockers;
    setLockersIsSet(true);
    return this;
  }

  public void unsetLockers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKERS_ISSET_ID);
  }

  /** Returns true if field lockers is set (has been assigned a value) and false otherwise */
  public boolean isSetLockers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKERS_ISSET_ID);
  }

  public void setLockersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKERS_ISSET_ID, value);
  }

  public long getLockersNowait() {
    return this.lockersNowait;
  }

  public TLockStat setLockersNowait(long lockersNowait) {
    this.lockersNowait = lockersNowait;
    setLockersNowaitIsSet(true);
    return this;
  }

  public void unsetLockersNowait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKERSNOWAIT_ISSET_ID);
  }

  /** Returns true if field lockersNowait is set (has been assigned a value) and false otherwise */
  public boolean isSetLockersNowait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKERSNOWAIT_ISSET_ID);
  }

  public void setLockersNowaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKERSNOWAIT_ISSET_ID, value);
  }

  public long getLockersWait() {
    return this.lockersWait;
  }

  public TLockStat setLockersWait(long lockersWait) {
    this.lockersWait = lockersWait;
    setLockersWaitIsSet(true);
    return this;
  }

  public void unsetLockersWait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKERSWAIT_ISSET_ID);
  }

  /** Returns true if field lockersWait is set (has been assigned a value) and false otherwise */
  public boolean isSetLockersWait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKERSWAIT_ISSET_ID);
  }

  public void setLockersWaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKERSWAIT_ISSET_ID, value);
  }

  public long getLockNowait() {
    return this.lockNowait;
  }

  public TLockStat setLockNowait(long lockNowait) {
    this.lockNowait = lockNowait;
    setLockNowaitIsSet(true);
    return this;
  }

  public void unsetLockNowait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKNOWAIT_ISSET_ID);
  }

  /** Returns true if field lockNowait is set (has been assigned a value) and false otherwise */
  public boolean isSetLockNowait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKNOWAIT_ISSET_ID);
  }

  public void setLockNowaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKNOWAIT_ISSET_ID, value);
  }

  public int getLocks() {
    return this.locks;
  }

  public TLockStat setLocks(int locks) {
    this.locks = locks;
    setLocksIsSet(true);
    return this;
  }

  public void unsetLocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKS_ISSET_ID);
  }

  /** Returns true if field locks is set (has been assigned a value) and false otherwise */
  public boolean isSetLocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKS_ISSET_ID);
  }

  public void setLocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKS_ISSET_ID, value);
  }

  public long getLocksteals() {
    return this.locksteals;
  }

  public TLockStat setLocksteals(long locksteals) {
    this.locksteals = locksteals;
    setLockstealsIsSet(true);
    return this;
  }

  public void unsetLocksteals() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKSTEALS_ISSET_ID);
  }

  /** Returns true if field locksteals is set (has been assigned a value) and false otherwise */
  public boolean isSetLocksteals() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKSTEALS_ISSET_ID);
  }

  public void setLockstealsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKSTEALS_ISSET_ID, value);
  }

  public int getLockTimeout() {
    return this.lockTimeout;
  }

  public TLockStat setLockTimeout(int lockTimeout) {
    this.lockTimeout = lockTimeout;
    setLockTimeoutIsSet(true);
    return this;
  }

  public void unsetLockTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKTIMEOUT_ISSET_ID);
  }

  /** Returns true if field lockTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetLockTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKTIMEOUT_ISSET_ID);
  }

  public void setLockTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKTIMEOUT_ISSET_ID, value);
  }

  public long getLockWait() {
    return this.lockWait;
  }

  public TLockStat setLockWait(long lockWait) {
    this.lockWait = lockWait;
    setLockWaitIsSet(true);
    return this;
  }

  public void unsetLockWait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKWAIT_ISSET_ID);
  }

  /** Returns true if field lockWait is set (has been assigned a value) and false otherwise */
  public boolean isSetLockWait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKWAIT_ISSET_ID);
  }

  public void setLockWaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKWAIT_ISSET_ID, value);
  }

  public int getMaxHlocks() {
    return this.maxHlocks;
  }

  public TLockStat setMaxHlocks(int maxHlocks) {
    this.maxHlocks = maxHlocks;
    setMaxHlocksIsSet(true);
    return this;
  }

  public void unsetMaxHlocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXHLOCKS_ISSET_ID);
  }

  /** Returns true if field maxHlocks is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxHlocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXHLOCKS_ISSET_ID);
  }

  public void setMaxHlocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXHLOCKS_ISSET_ID, value);
  }

  public int getMaxHobjects() {
    return this.maxHobjects;
  }

  public TLockStat setMaxHobjects(int maxHobjects) {
    this.maxHobjects = maxHobjects;
    setMaxHobjectsIsSet(true);
    return this;
  }

  public void unsetMaxHobjects() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXHOBJECTS_ISSET_ID);
  }

  /** Returns true if field maxHobjects is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxHobjects() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXHOBJECTS_ISSET_ID);
  }

  public void setMaxHobjectsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXHOBJECTS_ISSET_ID, value);
  }

  public int getMaxLockers() {
    return this.maxLockers;
  }

  public TLockStat setMaxLockers(int maxLockers) {
    this.maxLockers = maxLockers;
    setMaxLockersIsSet(true);
    return this;
  }

  public void unsetMaxLockers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXLOCKERS_ISSET_ID);
  }

  /** Returns true if field maxLockers is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLockers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXLOCKERS_ISSET_ID);
  }

  public void setMaxLockersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXLOCKERS_ISSET_ID, value);
  }

  public int getMaxLocks() {
    return this.maxLocks;
  }

  public TLockStat setMaxLocks(int maxLocks) {
    this.maxLocks = maxLocks;
    setMaxLocksIsSet(true);
    return this;
  }

  public void unsetMaxLocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXLOCKS_ISSET_ID);
  }

  /** Returns true if field maxLocks is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXLOCKS_ISSET_ID);
  }

  public void setMaxLocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXLOCKS_ISSET_ID, value);
  }

  public long getMaxLsteals() {
    return this.maxLsteals;
  }

  public TLockStat setMaxLsteals(long maxLsteals) {
    this.maxLsteals = maxLsteals;
    setMaxLstealsIsSet(true);
    return this;
  }

  public void unsetMaxLsteals() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXLSTEALS_ISSET_ID);
  }

  /** Returns true if field maxLsteals is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLsteals() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXLSTEALS_ISSET_ID);
  }

  public void setMaxLstealsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXLSTEALS_ISSET_ID, value);
  }

  public int getMaxNlockers() {
    return this.maxNlockers;
  }

  public TLockStat setMaxNlockers(int maxNlockers) {
    this.maxNlockers = maxNlockers;
    setMaxNlockersIsSet(true);
    return this;
  }

  public void unsetMaxNlockers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXNLOCKERS_ISSET_ID);
  }

  /** Returns true if field maxNlockers is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNlockers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXNLOCKERS_ISSET_ID);
  }

  public void setMaxNlockersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXNLOCKERS_ISSET_ID, value);
  }

  public int getMaxNlocks() {
    return this.maxNlocks;
  }

  public TLockStat setMaxNlocks(int maxNlocks) {
    this.maxNlocks = maxNlocks;
    setMaxNlocksIsSet(true);
    return this;
  }

  public void unsetMaxNlocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXNLOCKS_ISSET_ID);
  }

  /** Returns true if field maxNlocks is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNlocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXNLOCKS_ISSET_ID);
  }

  public void setMaxNlocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXNLOCKS_ISSET_ID, value);
  }

  public int getMaxNobjects() {
    return this.maxNobjects;
  }

  public TLockStat setMaxNobjects(int maxNobjects) {
    this.maxNobjects = maxNobjects;
    setMaxNobjectsIsSet(true);
    return this;
  }

  public void unsetMaxNobjects() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXNOBJECTS_ISSET_ID);
  }

  /** Returns true if field maxNobjects is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNobjects() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXNOBJECTS_ISSET_ID);
  }

  public void setMaxNobjectsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXNOBJECTS_ISSET_ID, value);
  }

  public int getMaxObjects() {
    return this.maxObjects;
  }

  public TLockStat setMaxObjects(int maxObjects) {
    this.maxObjects = maxObjects;
    setMaxObjectsIsSet(true);
    return this;
  }

  public void unsetMaxObjects() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXOBJECTS_ISSET_ID);
  }

  /** Returns true if field maxObjects is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxObjects() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXOBJECTS_ISSET_ID);
  }

  public void setMaxObjectsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXOBJECTS_ISSET_ID, value);
  }

  public long getMaxOsteals() {
    return this.maxOsteals;
  }

  public TLockStat setMaxOsteals(long maxOsteals) {
    this.maxOsteals = maxOsteals;
    setMaxOstealsIsSet(true);
    return this;
  }

  public void unsetMaxOsteals() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXOSTEALS_ISSET_ID);
  }

  /** Returns true if field maxOsteals is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxOsteals() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXOSTEALS_ISSET_ID);
  }

  public void setMaxOstealsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXOSTEALS_ISSET_ID, value);
  }

  public long getNumDeadlocks() {
    return this.numDeadlocks;
  }

  public TLockStat setNumDeadlocks(long numDeadlocks) {
    this.numDeadlocks = numDeadlocks;
    setNumDeadlocksIsSet(true);
    return this;
  }

  public void unsetNumDeadlocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMDEADLOCKS_ISSET_ID);
  }

  /** Returns true if field numDeadlocks is set (has been assigned a value) and false otherwise */
  public boolean isSetNumDeadlocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMDEADLOCKS_ISSET_ID);
  }

  public void setNumDeadlocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMDEADLOCKS_ISSET_ID, value);
  }

  public long getNumDowngrade() {
    return this.numDowngrade;
  }

  public TLockStat setNumDowngrade(long numDowngrade) {
    this.numDowngrade = numDowngrade;
    setNumDowngradeIsSet(true);
    return this;
  }

  public void unsetNumDowngrade() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMDOWNGRADE_ISSET_ID);
  }

  /** Returns true if field numDowngrade is set (has been assigned a value) and false otherwise */
  public boolean isSetNumDowngrade() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMDOWNGRADE_ISSET_ID);
  }

  public void setNumDowngradeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMDOWNGRADE_ISSET_ID, value);
  }

  public int getNumLockers() {
    return this.numLockers;
  }

  public TLockStat setNumLockers(int numLockers) {
    this.numLockers = numLockers;
    setNumLockersIsSet(true);
    return this;
  }

  public void unsetNumLockers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMLOCKERS_ISSET_ID);
  }

  /** Returns true if field numLockers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumLockers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMLOCKERS_ISSET_ID);
  }

  public void setNumLockersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMLOCKERS_ISSET_ID, value);
  }

  public long getNumLockersHit() {
    return this.numLockersHit;
  }

  public TLockStat setNumLockersHit(long numLockersHit) {
    this.numLockersHit = numLockersHit;
    setNumLockersHitIsSet(true);
    return this;
  }

  public void unsetNumLockersHit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMLOCKERSHIT_ISSET_ID);
  }

  /** Returns true if field numLockersHit is set (has been assigned a value) and false otherwise */
  public boolean isSetNumLockersHit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMLOCKERSHIT_ISSET_ID);
  }

  public void setNumLockersHitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMLOCKERSHIT_ISSET_ID, value);
  }

  public long getNumLockersReused() {
    return this.numLockersReused;
  }

  public TLockStat setNumLockersReused(long numLockersReused) {
    this.numLockersReused = numLockersReused;
    setNumLockersReusedIsSet(true);
    return this;
  }

  public void unsetNumLockersReused() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMLOCKERSREUSED_ISSET_ID);
  }

  /** Returns true if field numLockersReused is set (has been assigned a value) and false otherwise */
  public boolean isSetNumLockersReused() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMLOCKERSREUSED_ISSET_ID);
  }

  public void setNumLockersReusedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMLOCKERSREUSED_ISSET_ID, value);
  }

  public int getNumLocks() {
    return this.numLocks;
  }

  public TLockStat setNumLocks(int numLocks) {
    this.numLocks = numLocks;
    setNumLocksIsSet(true);
    return this;
  }

  public void unsetNumLocks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMLOCKS_ISSET_ID);
  }

  /** Returns true if field numLocks is set (has been assigned a value) and false otherwise */
  public boolean isSetNumLocks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMLOCKS_ISSET_ID);
  }

  public void setNumLocksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMLOCKS_ISSET_ID, value);
  }

  public long getNumLockTimeouts() {
    return this.numLockTimeouts;
  }

  public TLockStat setNumLockTimeouts(long numLockTimeouts) {
    this.numLockTimeouts = numLockTimeouts;
    setNumLockTimeoutsIsSet(true);
    return this;
  }

  public void unsetNumLockTimeouts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMLOCKTIMEOUTS_ISSET_ID);
  }

  /** Returns true if field numLockTimeouts is set (has been assigned a value) and false otherwise */
  public boolean isSetNumLockTimeouts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMLOCKTIMEOUTS_ISSET_ID);
  }

  public void setNumLockTimeoutsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMLOCKTIMEOUTS_ISSET_ID, value);
  }

  public int getNumModes() {
    return this.numModes;
  }

  public TLockStat setNumModes(int numModes) {
    this.numModes = numModes;
    setNumModesIsSet(true);
    return this;
  }

  public void unsetNumModes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMMODES_ISSET_ID);
  }

  /** Returns true if field numModes is set (has been assigned a value) and false otherwise */
  public boolean isSetNumModes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMMODES_ISSET_ID);
  }

  public void setNumModesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMMODES_ISSET_ID, value);
  }

  public int getNobjects() {
    return this.nobjects;
  }

  public TLockStat setNobjects(int nobjects) {
    this.nobjects = nobjects;
    setNobjectsIsSet(true);
    return this;
  }

  public void unsetNobjects() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOBJECTS_ISSET_ID);
  }

  /** Returns true if field nobjects is set (has been assigned a value) and false otherwise */
  public boolean isSetNobjects() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOBJECTS_ISSET_ID);
  }

  public void setNobjectsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOBJECTS_ISSET_ID, value);
  }

  public long getNumReleases() {
    return this.numReleases;
  }

  public TLockStat setNumReleases(long numReleases) {
    this.numReleases = numReleases;
    setNumReleasesIsSet(true);
    return this;
  }

  public void unsetNumReleases() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMRELEASES_ISSET_ID);
  }

  /** Returns true if field numReleases is set (has been assigned a value) and false otherwise */
  public boolean isSetNumReleases() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMRELEASES_ISSET_ID);
  }

  public void setNumReleasesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMRELEASES_ISSET_ID, value);
  }

  public long getNumRequests() {
    return this.numRequests;
  }

  public TLockStat setNumRequests(long numRequests) {
    this.numRequests = numRequests;
    setNumRequestsIsSet(true);
    return this;
  }

  public void unsetNumRequests() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMREQUESTS_ISSET_ID);
  }

  /** Returns true if field numRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetNumRequests() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMREQUESTS_ISSET_ID);
  }

  public void setNumRequestsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMREQUESTS_ISSET_ID, value);
  }

  public long getNumTxnTimeouts() {
    return this.numTxnTimeouts;
  }

  public TLockStat setNumTxnTimeouts(long numTxnTimeouts) {
    this.numTxnTimeouts = numTxnTimeouts;
    setNumTxnTimeoutsIsSet(true);
    return this;
  }

  public void unsetNumTxnTimeouts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMTXNTIMEOUTS_ISSET_ID);
  }

  /** Returns true if field numTxnTimeouts is set (has been assigned a value) and false otherwise */
  public boolean isSetNumTxnTimeouts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMTXNTIMEOUTS_ISSET_ID);
  }

  public void setNumTxnTimeoutsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMTXNTIMEOUTS_ISSET_ID, value);
  }

  public long getNumUpgrade() {
    return this.numUpgrade;
  }

  public TLockStat setNumUpgrade(long numUpgrade) {
    this.numUpgrade = numUpgrade;
    setNumUpgradeIsSet(true);
    return this;
  }

  public void unsetNumUpgrade() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMUPGRADE_ISSET_ID);
  }

  /** Returns true if field numUpgrade is set (has been assigned a value) and false otherwise */
  public boolean isSetNumUpgrade() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMUPGRADE_ISSET_ID);
  }

  public void setNumUpgradeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMUPGRADE_ISSET_ID, value);
  }

  public int getObjects() {
    return this.objects;
  }

  public TLockStat setObjects(int objects) {
    this.objects = objects;
    setObjectsIsSet(true);
    return this;
  }

  public void unsetObjects() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OBJECTS_ISSET_ID);
  }

  /** Returns true if field objects is set (has been assigned a value) and false otherwise */
  public boolean isSetObjects() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OBJECTS_ISSET_ID);
  }

  public void setObjectsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OBJECTS_ISSET_ID, value);
  }

  public long getObjectsteals() {
    return this.objectsteals;
  }

  public TLockStat setObjectsteals(long objectsteals) {
    this.objectsteals = objectsteals;
    setObjectstealsIsSet(true);
    return this;
  }

  public void unsetObjectsteals() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OBJECTSTEALS_ISSET_ID);
  }

  /** Returns true if field objectsteals is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectsteals() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OBJECTSTEALS_ISSET_ID);
  }

  public void setObjectstealsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OBJECTSTEALS_ISSET_ID, value);
  }

  public long getObjsNowait() {
    return this.objsNowait;
  }

  public TLockStat setObjsNowait(long objsNowait) {
    this.objsNowait = objsNowait;
    setObjsNowaitIsSet(true);
    return this;
  }

  public void unsetObjsNowait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OBJSNOWAIT_ISSET_ID);
  }

  /** Returns true if field objsNowait is set (has been assigned a value) and false otherwise */
  public boolean isSetObjsNowait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OBJSNOWAIT_ISSET_ID);
  }

  public void setObjsNowaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OBJSNOWAIT_ISSET_ID, value);
  }

  public long getObjsWait() {
    return this.objsWait;
  }

  public TLockStat setObjsWait(long objsWait) {
    this.objsWait = objsWait;
    setObjsWaitIsSet(true);
    return this;
  }

  public void unsetObjsWait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OBJSWAIT_ISSET_ID);
  }

  /** Returns true if field objsWait is set (has been assigned a value) and false otherwise */
  public boolean isSetObjsWait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OBJSWAIT_ISSET_ID);
  }

  public void setObjsWaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OBJSWAIT_ISSET_ID, value);
  }

  public int getPartitions() {
    return this.partitions;
  }

  public TLockStat setPartitions(int partitions) {
    this.partitions = partitions;
    setPartitionsIsSet(true);
    return this;
  }

  public void unsetPartitions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
  }

  public void setPartitionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITIONS_ISSET_ID, value);
  }

  public long getPartMaxNowait() {
    return this.partMaxNowait;
  }

  public TLockStat setPartMaxNowait(long partMaxNowait) {
    this.partMaxNowait = partMaxNowait;
    setPartMaxNowaitIsSet(true);
    return this;
  }

  public void unsetPartMaxNowait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTMAXNOWAIT_ISSET_ID);
  }

  /** Returns true if field partMaxNowait is set (has been assigned a value) and false otherwise */
  public boolean isSetPartMaxNowait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTMAXNOWAIT_ISSET_ID);
  }

  public void setPartMaxNowaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTMAXNOWAIT_ISSET_ID, value);
  }

  public long getPartMaxWait() {
    return this.partMaxWait;
  }

  public TLockStat setPartMaxWait(long partMaxWait) {
    this.partMaxWait = partMaxWait;
    setPartMaxWaitIsSet(true);
    return this;
  }

  public void unsetPartMaxWait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTMAXWAIT_ISSET_ID);
  }

  /** Returns true if field partMaxWait is set (has been assigned a value) and false otherwise */
  public boolean isSetPartMaxWait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTMAXWAIT_ISSET_ID);
  }

  public void setPartMaxWaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTMAXWAIT_ISSET_ID, value);
  }

  public long getPartNowait() {
    return this.partNowait;
  }

  public TLockStat setPartNowait(long partNowait) {
    this.partNowait = partNowait;
    setPartNowaitIsSet(true);
    return this;
  }

  public void unsetPartNowait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTNOWAIT_ISSET_ID);
  }

  /** Returns true if field partNowait is set (has been assigned a value) and false otherwise */
  public boolean isSetPartNowait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTNOWAIT_ISSET_ID);
  }

  public void setPartNowaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTNOWAIT_ISSET_ID, value);
  }

  public long getPartWait() {
    return this.partWait;
  }

  public TLockStat setPartWait(long partWait) {
    this.partWait = partWait;
    setPartWaitIsSet(true);
    return this;
  }

  public void unsetPartWait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTWAIT_ISSET_ID);
  }

  /** Returns true if field partWait is set (has been assigned a value) and false otherwise */
  public boolean isSetPartWait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTWAIT_ISSET_ID);
  }

  public void setPartWaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTWAIT_ISSET_ID, value);
  }

  public long getRegionNowait() {
    return this.regionNowait;
  }

  public TLockStat setRegionNowait(long regionNowait) {
    this.regionNowait = regionNowait;
    setRegionNowaitIsSet(true);
    return this;
  }

  public void unsetRegionNowait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGIONNOWAIT_ISSET_ID);
  }

  /** Returns true if field regionNowait is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionNowait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGIONNOWAIT_ISSET_ID);
  }

  public void setRegionNowaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGIONNOWAIT_ISSET_ID, value);
  }

  public long getRegionWait() {
    return this.regionWait;
  }

  public TLockStat setRegionWait(long regionWait) {
    this.regionWait = regionWait;
    setRegionWaitIsSet(true);
    return this;
  }

  public void unsetRegionWait() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGIONWAIT_ISSET_ID);
  }

  /** Returns true if field regionWait is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionWait() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGIONWAIT_ISSET_ID);
  }

  public void setRegionWaitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGIONWAIT_ISSET_ID, value);
  }

  public long getRegSize() {
    return this.regSize;
  }

  public TLockStat setRegSize(long regSize) {
    this.regSize = regSize;
    setRegSizeIsSet(true);
    return this;
  }

  public void unsetRegSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGSIZE_ISSET_ID);
  }

  /** Returns true if field regSize is set (has been assigned a value) and false otherwise */
  public boolean isSetRegSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGSIZE_ISSET_ID);
  }

  public void setRegSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGSIZE_ISSET_ID, value);
  }

  public int getTableSize() {
    return this.tableSize;
  }

  public TLockStat setTableSize(int tableSize) {
    this.tableSize = tableSize;
    setTableSizeIsSet(true);
    return this;
  }

  public void unsetTableSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLESIZE_ISSET_ID);
  }

  /** Returns true if field tableSize is set (has been assigned a value) and false otherwise */
  public boolean isSetTableSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLESIZE_ISSET_ID);
  }

  public void setTableSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLESIZE_ISSET_ID, value);
  }

  public int getTxnTimeout() {
    return this.txnTimeout;
  }

  public TLockStat setTxnTimeout(int txnTimeout) {
    this.txnTimeout = txnTimeout;
    setTxnTimeoutIsSet(true);
    return this;
  }

  public void unsetTxnTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNTIMEOUT_ISSET_ID);
  }

  /** Returns true if field txnTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNTIMEOUT_ISSET_ID);
  }

  public void setTxnTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNTIMEOUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CUR_MAX_ID:
      if (value == null) {
        unsetCurMaxId();
      } else {
        setCurMaxId((java.lang.Integer)value);
      }
      break;

    case HASH_LEN:
      if (value == null) {
        unsetHashLen();
      } else {
        setHashLen((java.lang.Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case INITLOCKERS:
      if (value == null) {
        unsetInitlockers();
      } else {
        setInitlockers((java.lang.Integer)value);
      }
      break;

    case INITLOCKS:
      if (value == null) {
        unsetInitlocks();
      } else {
        setInitlocks((java.lang.Integer)value);
      }
      break;

    case INITOBJECTS:
      if (value == null) {
        unsetInitobjects();
      } else {
        setInitobjects((java.lang.Integer)value);
      }
      break;

    case LOCKERS:
      if (value == null) {
        unsetLockers();
      } else {
        setLockers((java.lang.Integer)value);
      }
      break;

    case LOCKERS_NOWAIT:
      if (value == null) {
        unsetLockersNowait();
      } else {
        setLockersNowait((java.lang.Long)value);
      }
      break;

    case LOCKERS_WAIT:
      if (value == null) {
        unsetLockersWait();
      } else {
        setLockersWait((java.lang.Long)value);
      }
      break;

    case LOCK_NOWAIT:
      if (value == null) {
        unsetLockNowait();
      } else {
        setLockNowait((java.lang.Long)value);
      }
      break;

    case LOCKS:
      if (value == null) {
        unsetLocks();
      } else {
        setLocks((java.lang.Integer)value);
      }
      break;

    case LOCKSTEALS:
      if (value == null) {
        unsetLocksteals();
      } else {
        setLocksteals((java.lang.Long)value);
      }
      break;

    case LOCK_TIMEOUT:
      if (value == null) {
        unsetLockTimeout();
      } else {
        setLockTimeout((java.lang.Integer)value);
      }
      break;

    case LOCK_WAIT:
      if (value == null) {
        unsetLockWait();
      } else {
        setLockWait((java.lang.Long)value);
      }
      break;

    case MAX_HLOCKS:
      if (value == null) {
        unsetMaxHlocks();
      } else {
        setMaxHlocks((java.lang.Integer)value);
      }
      break;

    case MAX_HOBJECTS:
      if (value == null) {
        unsetMaxHobjects();
      } else {
        setMaxHobjects((java.lang.Integer)value);
      }
      break;

    case MAX_LOCKERS:
      if (value == null) {
        unsetMaxLockers();
      } else {
        setMaxLockers((java.lang.Integer)value);
      }
      break;

    case MAX_LOCKS:
      if (value == null) {
        unsetMaxLocks();
      } else {
        setMaxLocks((java.lang.Integer)value);
      }
      break;

    case MAX_LSTEALS:
      if (value == null) {
        unsetMaxLsteals();
      } else {
        setMaxLsteals((java.lang.Long)value);
      }
      break;

    case MAX_NLOCKERS:
      if (value == null) {
        unsetMaxNlockers();
      } else {
        setMaxNlockers((java.lang.Integer)value);
      }
      break;

    case MAX_NLOCKS:
      if (value == null) {
        unsetMaxNlocks();
      } else {
        setMaxNlocks((java.lang.Integer)value);
      }
      break;

    case MAX_NOBJECTS:
      if (value == null) {
        unsetMaxNobjects();
      } else {
        setMaxNobjects((java.lang.Integer)value);
      }
      break;

    case MAX_OBJECTS:
      if (value == null) {
        unsetMaxObjects();
      } else {
        setMaxObjects((java.lang.Integer)value);
      }
      break;

    case MAX_OSTEALS:
      if (value == null) {
        unsetMaxOsteals();
      } else {
        setMaxOsteals((java.lang.Long)value);
      }
      break;

    case NUM_DEADLOCKS:
      if (value == null) {
        unsetNumDeadlocks();
      } else {
        setNumDeadlocks((java.lang.Long)value);
      }
      break;

    case NUM_DOWNGRADE:
      if (value == null) {
        unsetNumDowngrade();
      } else {
        setNumDowngrade((java.lang.Long)value);
      }
      break;

    case NUM_LOCKERS:
      if (value == null) {
        unsetNumLockers();
      } else {
        setNumLockers((java.lang.Integer)value);
      }
      break;

    case NUM_LOCKERS_HIT:
      if (value == null) {
        unsetNumLockersHit();
      } else {
        setNumLockersHit((java.lang.Long)value);
      }
      break;

    case NUM_LOCKERS_REUSED:
      if (value == null) {
        unsetNumLockersReused();
      } else {
        setNumLockersReused((java.lang.Long)value);
      }
      break;

    case NUM_LOCKS:
      if (value == null) {
        unsetNumLocks();
      } else {
        setNumLocks((java.lang.Integer)value);
      }
      break;

    case NUM_LOCK_TIMEOUTS:
      if (value == null) {
        unsetNumLockTimeouts();
      } else {
        setNumLockTimeouts((java.lang.Long)value);
      }
      break;

    case NUM_MODES:
      if (value == null) {
        unsetNumModes();
      } else {
        setNumModes((java.lang.Integer)value);
      }
      break;

    case NOBJECTS:
      if (value == null) {
        unsetNobjects();
      } else {
        setNobjects((java.lang.Integer)value);
      }
      break;

    case NUM_RELEASES:
      if (value == null) {
        unsetNumReleases();
      } else {
        setNumReleases((java.lang.Long)value);
      }
      break;

    case NUM_REQUESTS:
      if (value == null) {
        unsetNumRequests();
      } else {
        setNumRequests((java.lang.Long)value);
      }
      break;

    case NUM_TXN_TIMEOUTS:
      if (value == null) {
        unsetNumTxnTimeouts();
      } else {
        setNumTxnTimeouts((java.lang.Long)value);
      }
      break;

    case NUM_UPGRADE:
      if (value == null) {
        unsetNumUpgrade();
      } else {
        setNumUpgrade((java.lang.Long)value);
      }
      break;

    case OBJECTS:
      if (value == null) {
        unsetObjects();
      } else {
        setObjects((java.lang.Integer)value);
      }
      break;

    case OBJECTSTEALS:
      if (value == null) {
        unsetObjectsteals();
      } else {
        setObjectsteals((java.lang.Long)value);
      }
      break;

    case OBJS_NOWAIT:
      if (value == null) {
        unsetObjsNowait();
      } else {
        setObjsNowait((java.lang.Long)value);
      }
      break;

    case OBJS_WAIT:
      if (value == null) {
        unsetObjsWait();
      } else {
        setObjsWait((java.lang.Long)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((java.lang.Integer)value);
      }
      break;

    case PART_MAX_NOWAIT:
      if (value == null) {
        unsetPartMaxNowait();
      } else {
        setPartMaxNowait((java.lang.Long)value);
      }
      break;

    case PART_MAX_WAIT:
      if (value == null) {
        unsetPartMaxWait();
      } else {
        setPartMaxWait((java.lang.Long)value);
      }
      break;

    case PART_NOWAIT:
      if (value == null) {
        unsetPartNowait();
      } else {
        setPartNowait((java.lang.Long)value);
      }
      break;

    case PART_WAIT:
      if (value == null) {
        unsetPartWait();
      } else {
        setPartWait((java.lang.Long)value);
      }
      break;

    case REGION_NOWAIT:
      if (value == null) {
        unsetRegionNowait();
      } else {
        setRegionNowait((java.lang.Long)value);
      }
      break;

    case REGION_WAIT:
      if (value == null) {
        unsetRegionWait();
      } else {
        setRegionWait((java.lang.Long)value);
      }
      break;

    case REG_SIZE:
      if (value == null) {
        unsetRegSize();
      } else {
        setRegSize((java.lang.Long)value);
      }
      break;

    case TABLE_SIZE:
      if (value == null) {
        unsetTableSize();
      } else {
        setTableSize((java.lang.Integer)value);
      }
      break;

    case TXN_TIMEOUT:
      if (value == null) {
        unsetTxnTimeout();
      } else {
        setTxnTimeout((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CUR_MAX_ID:
      return getCurMaxId();

    case HASH_LEN:
      return getHashLen();

    case ID:
      return getId();

    case INITLOCKERS:
      return getInitlockers();

    case INITLOCKS:
      return getInitlocks();

    case INITOBJECTS:
      return getInitobjects();

    case LOCKERS:
      return getLockers();

    case LOCKERS_NOWAIT:
      return getLockersNowait();

    case LOCKERS_WAIT:
      return getLockersWait();

    case LOCK_NOWAIT:
      return getLockNowait();

    case LOCKS:
      return getLocks();

    case LOCKSTEALS:
      return getLocksteals();

    case LOCK_TIMEOUT:
      return getLockTimeout();

    case LOCK_WAIT:
      return getLockWait();

    case MAX_HLOCKS:
      return getMaxHlocks();

    case MAX_HOBJECTS:
      return getMaxHobjects();

    case MAX_LOCKERS:
      return getMaxLockers();

    case MAX_LOCKS:
      return getMaxLocks();

    case MAX_LSTEALS:
      return getMaxLsteals();

    case MAX_NLOCKERS:
      return getMaxNlockers();

    case MAX_NLOCKS:
      return getMaxNlocks();

    case MAX_NOBJECTS:
      return getMaxNobjects();

    case MAX_OBJECTS:
      return getMaxObjects();

    case MAX_OSTEALS:
      return getMaxOsteals();

    case NUM_DEADLOCKS:
      return getNumDeadlocks();

    case NUM_DOWNGRADE:
      return getNumDowngrade();

    case NUM_LOCKERS:
      return getNumLockers();

    case NUM_LOCKERS_HIT:
      return getNumLockersHit();

    case NUM_LOCKERS_REUSED:
      return getNumLockersReused();

    case NUM_LOCKS:
      return getNumLocks();

    case NUM_LOCK_TIMEOUTS:
      return getNumLockTimeouts();

    case NUM_MODES:
      return getNumModes();

    case NOBJECTS:
      return getNobjects();

    case NUM_RELEASES:
      return getNumReleases();

    case NUM_REQUESTS:
      return getNumRequests();

    case NUM_TXN_TIMEOUTS:
      return getNumTxnTimeouts();

    case NUM_UPGRADE:
      return getNumUpgrade();

    case OBJECTS:
      return getObjects();

    case OBJECTSTEALS:
      return getObjectsteals();

    case OBJS_NOWAIT:
      return getObjsNowait();

    case OBJS_WAIT:
      return getObjsWait();

    case PARTITIONS:
      return getPartitions();

    case PART_MAX_NOWAIT:
      return getPartMaxNowait();

    case PART_MAX_WAIT:
      return getPartMaxWait();

    case PART_NOWAIT:
      return getPartNowait();

    case PART_WAIT:
      return getPartWait();

    case REGION_NOWAIT:
      return getRegionNowait();

    case REGION_WAIT:
      return getRegionWait();

    case REG_SIZE:
      return getRegSize();

    case TABLE_SIZE:
      return getTableSize();

    case TXN_TIMEOUT:
      return getTxnTimeout();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CUR_MAX_ID:
      return isSetCurMaxId();
    case HASH_LEN:
      return isSetHashLen();
    case ID:
      return isSetId();
    case INITLOCKERS:
      return isSetInitlockers();
    case INITLOCKS:
      return isSetInitlocks();
    case INITOBJECTS:
      return isSetInitobjects();
    case LOCKERS:
      return isSetLockers();
    case LOCKERS_NOWAIT:
      return isSetLockersNowait();
    case LOCKERS_WAIT:
      return isSetLockersWait();
    case LOCK_NOWAIT:
      return isSetLockNowait();
    case LOCKS:
      return isSetLocks();
    case LOCKSTEALS:
      return isSetLocksteals();
    case LOCK_TIMEOUT:
      return isSetLockTimeout();
    case LOCK_WAIT:
      return isSetLockWait();
    case MAX_HLOCKS:
      return isSetMaxHlocks();
    case MAX_HOBJECTS:
      return isSetMaxHobjects();
    case MAX_LOCKERS:
      return isSetMaxLockers();
    case MAX_LOCKS:
      return isSetMaxLocks();
    case MAX_LSTEALS:
      return isSetMaxLsteals();
    case MAX_NLOCKERS:
      return isSetMaxNlockers();
    case MAX_NLOCKS:
      return isSetMaxNlocks();
    case MAX_NOBJECTS:
      return isSetMaxNobjects();
    case MAX_OBJECTS:
      return isSetMaxObjects();
    case MAX_OSTEALS:
      return isSetMaxOsteals();
    case NUM_DEADLOCKS:
      return isSetNumDeadlocks();
    case NUM_DOWNGRADE:
      return isSetNumDowngrade();
    case NUM_LOCKERS:
      return isSetNumLockers();
    case NUM_LOCKERS_HIT:
      return isSetNumLockersHit();
    case NUM_LOCKERS_REUSED:
      return isSetNumLockersReused();
    case NUM_LOCKS:
      return isSetNumLocks();
    case NUM_LOCK_TIMEOUTS:
      return isSetNumLockTimeouts();
    case NUM_MODES:
      return isSetNumModes();
    case NOBJECTS:
      return isSetNobjects();
    case NUM_RELEASES:
      return isSetNumReleases();
    case NUM_REQUESTS:
      return isSetNumRequests();
    case NUM_TXN_TIMEOUTS:
      return isSetNumTxnTimeouts();
    case NUM_UPGRADE:
      return isSetNumUpgrade();
    case OBJECTS:
      return isSetObjects();
    case OBJECTSTEALS:
      return isSetObjectsteals();
    case OBJS_NOWAIT:
      return isSetObjsNowait();
    case OBJS_WAIT:
      return isSetObjsWait();
    case PARTITIONS:
      return isSetPartitions();
    case PART_MAX_NOWAIT:
      return isSetPartMaxNowait();
    case PART_MAX_WAIT:
      return isSetPartMaxWait();
    case PART_NOWAIT:
      return isSetPartNowait();
    case PART_WAIT:
      return isSetPartWait();
    case REGION_NOWAIT:
      return isSetRegionNowait();
    case REGION_WAIT:
      return isSetRegionWait();
    case REG_SIZE:
      return isSetRegSize();
    case TABLE_SIZE:
      return isSetTableSize();
    case TXN_TIMEOUT:
      return isSetTxnTimeout();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TLockStat)
      return this.equals((TLockStat)that);
    return false;
  }

  public boolean equals(TLockStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_curMaxId = true;
    boolean that_present_curMaxId = true;
    if (this_present_curMaxId || that_present_curMaxId) {
      if (!(this_present_curMaxId && that_present_curMaxId))
        return false;
      if (this.curMaxId != that.curMaxId)
        return false;
    }

    boolean this_present_hashLen = true;
    boolean that_present_hashLen = true;
    if (this_present_hashLen || that_present_hashLen) {
      if (!(this_present_hashLen && that_present_hashLen))
        return false;
      if (this.hashLen != that.hashLen)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_initlockers = true;
    boolean that_present_initlockers = true;
    if (this_present_initlockers || that_present_initlockers) {
      if (!(this_present_initlockers && that_present_initlockers))
        return false;
      if (this.initlockers != that.initlockers)
        return false;
    }

    boolean this_present_initlocks = true;
    boolean that_present_initlocks = true;
    if (this_present_initlocks || that_present_initlocks) {
      if (!(this_present_initlocks && that_present_initlocks))
        return false;
      if (this.initlocks != that.initlocks)
        return false;
    }

    boolean this_present_initobjects = true;
    boolean that_present_initobjects = true;
    if (this_present_initobjects || that_present_initobjects) {
      if (!(this_present_initobjects && that_present_initobjects))
        return false;
      if (this.initobjects != that.initobjects)
        return false;
    }

    boolean this_present_lockers = true;
    boolean that_present_lockers = true;
    if (this_present_lockers || that_present_lockers) {
      if (!(this_present_lockers && that_present_lockers))
        return false;
      if (this.lockers != that.lockers)
        return false;
    }

    boolean this_present_lockersNowait = true;
    boolean that_present_lockersNowait = true;
    if (this_present_lockersNowait || that_present_lockersNowait) {
      if (!(this_present_lockersNowait && that_present_lockersNowait))
        return false;
      if (this.lockersNowait != that.lockersNowait)
        return false;
    }

    boolean this_present_lockersWait = true;
    boolean that_present_lockersWait = true;
    if (this_present_lockersWait || that_present_lockersWait) {
      if (!(this_present_lockersWait && that_present_lockersWait))
        return false;
      if (this.lockersWait != that.lockersWait)
        return false;
    }

    boolean this_present_lockNowait = true;
    boolean that_present_lockNowait = true;
    if (this_present_lockNowait || that_present_lockNowait) {
      if (!(this_present_lockNowait && that_present_lockNowait))
        return false;
      if (this.lockNowait != that.lockNowait)
        return false;
    }

    boolean this_present_locks = true;
    boolean that_present_locks = true;
    if (this_present_locks || that_present_locks) {
      if (!(this_present_locks && that_present_locks))
        return false;
      if (this.locks != that.locks)
        return false;
    }

    boolean this_present_locksteals = true;
    boolean that_present_locksteals = true;
    if (this_present_locksteals || that_present_locksteals) {
      if (!(this_present_locksteals && that_present_locksteals))
        return false;
      if (this.locksteals != that.locksteals)
        return false;
    }

    boolean this_present_lockTimeout = true;
    boolean that_present_lockTimeout = true;
    if (this_present_lockTimeout || that_present_lockTimeout) {
      if (!(this_present_lockTimeout && that_present_lockTimeout))
        return false;
      if (this.lockTimeout != that.lockTimeout)
        return false;
    }

    boolean this_present_lockWait = true;
    boolean that_present_lockWait = true;
    if (this_present_lockWait || that_present_lockWait) {
      if (!(this_present_lockWait && that_present_lockWait))
        return false;
      if (this.lockWait != that.lockWait)
        return false;
    }

    boolean this_present_maxHlocks = true;
    boolean that_present_maxHlocks = true;
    if (this_present_maxHlocks || that_present_maxHlocks) {
      if (!(this_present_maxHlocks && that_present_maxHlocks))
        return false;
      if (this.maxHlocks != that.maxHlocks)
        return false;
    }

    boolean this_present_maxHobjects = true;
    boolean that_present_maxHobjects = true;
    if (this_present_maxHobjects || that_present_maxHobjects) {
      if (!(this_present_maxHobjects && that_present_maxHobjects))
        return false;
      if (this.maxHobjects != that.maxHobjects)
        return false;
    }

    boolean this_present_maxLockers = true;
    boolean that_present_maxLockers = true;
    if (this_present_maxLockers || that_present_maxLockers) {
      if (!(this_present_maxLockers && that_present_maxLockers))
        return false;
      if (this.maxLockers != that.maxLockers)
        return false;
    }

    boolean this_present_maxLocks = true;
    boolean that_present_maxLocks = true;
    if (this_present_maxLocks || that_present_maxLocks) {
      if (!(this_present_maxLocks && that_present_maxLocks))
        return false;
      if (this.maxLocks != that.maxLocks)
        return false;
    }

    boolean this_present_maxLsteals = true;
    boolean that_present_maxLsteals = true;
    if (this_present_maxLsteals || that_present_maxLsteals) {
      if (!(this_present_maxLsteals && that_present_maxLsteals))
        return false;
      if (this.maxLsteals != that.maxLsteals)
        return false;
    }

    boolean this_present_maxNlockers = true;
    boolean that_present_maxNlockers = true;
    if (this_present_maxNlockers || that_present_maxNlockers) {
      if (!(this_present_maxNlockers && that_present_maxNlockers))
        return false;
      if (this.maxNlockers != that.maxNlockers)
        return false;
    }

    boolean this_present_maxNlocks = true;
    boolean that_present_maxNlocks = true;
    if (this_present_maxNlocks || that_present_maxNlocks) {
      if (!(this_present_maxNlocks && that_present_maxNlocks))
        return false;
      if (this.maxNlocks != that.maxNlocks)
        return false;
    }

    boolean this_present_maxNobjects = true;
    boolean that_present_maxNobjects = true;
    if (this_present_maxNobjects || that_present_maxNobjects) {
      if (!(this_present_maxNobjects && that_present_maxNobjects))
        return false;
      if (this.maxNobjects != that.maxNobjects)
        return false;
    }

    boolean this_present_maxObjects = true;
    boolean that_present_maxObjects = true;
    if (this_present_maxObjects || that_present_maxObjects) {
      if (!(this_present_maxObjects && that_present_maxObjects))
        return false;
      if (this.maxObjects != that.maxObjects)
        return false;
    }

    boolean this_present_maxOsteals = true;
    boolean that_present_maxOsteals = true;
    if (this_present_maxOsteals || that_present_maxOsteals) {
      if (!(this_present_maxOsteals && that_present_maxOsteals))
        return false;
      if (this.maxOsteals != that.maxOsteals)
        return false;
    }

    boolean this_present_numDeadlocks = true;
    boolean that_present_numDeadlocks = true;
    if (this_present_numDeadlocks || that_present_numDeadlocks) {
      if (!(this_present_numDeadlocks && that_present_numDeadlocks))
        return false;
      if (this.numDeadlocks != that.numDeadlocks)
        return false;
    }

    boolean this_present_numDowngrade = true;
    boolean that_present_numDowngrade = true;
    if (this_present_numDowngrade || that_present_numDowngrade) {
      if (!(this_present_numDowngrade && that_present_numDowngrade))
        return false;
      if (this.numDowngrade != that.numDowngrade)
        return false;
    }

    boolean this_present_numLockers = true;
    boolean that_present_numLockers = true;
    if (this_present_numLockers || that_present_numLockers) {
      if (!(this_present_numLockers && that_present_numLockers))
        return false;
      if (this.numLockers != that.numLockers)
        return false;
    }

    boolean this_present_numLockersHit = true;
    boolean that_present_numLockersHit = true;
    if (this_present_numLockersHit || that_present_numLockersHit) {
      if (!(this_present_numLockersHit && that_present_numLockersHit))
        return false;
      if (this.numLockersHit != that.numLockersHit)
        return false;
    }

    boolean this_present_numLockersReused = true;
    boolean that_present_numLockersReused = true;
    if (this_present_numLockersReused || that_present_numLockersReused) {
      if (!(this_present_numLockersReused && that_present_numLockersReused))
        return false;
      if (this.numLockersReused != that.numLockersReused)
        return false;
    }

    boolean this_present_numLocks = true;
    boolean that_present_numLocks = true;
    if (this_present_numLocks || that_present_numLocks) {
      if (!(this_present_numLocks && that_present_numLocks))
        return false;
      if (this.numLocks != that.numLocks)
        return false;
    }

    boolean this_present_numLockTimeouts = true;
    boolean that_present_numLockTimeouts = true;
    if (this_present_numLockTimeouts || that_present_numLockTimeouts) {
      if (!(this_present_numLockTimeouts && that_present_numLockTimeouts))
        return false;
      if (this.numLockTimeouts != that.numLockTimeouts)
        return false;
    }

    boolean this_present_numModes = true;
    boolean that_present_numModes = true;
    if (this_present_numModes || that_present_numModes) {
      if (!(this_present_numModes && that_present_numModes))
        return false;
      if (this.numModes != that.numModes)
        return false;
    }

    boolean this_present_nobjects = true;
    boolean that_present_nobjects = true;
    if (this_present_nobjects || that_present_nobjects) {
      if (!(this_present_nobjects && that_present_nobjects))
        return false;
      if (this.nobjects != that.nobjects)
        return false;
    }

    boolean this_present_numReleases = true;
    boolean that_present_numReleases = true;
    if (this_present_numReleases || that_present_numReleases) {
      if (!(this_present_numReleases && that_present_numReleases))
        return false;
      if (this.numReleases != that.numReleases)
        return false;
    }

    boolean this_present_numRequests = true;
    boolean that_present_numRequests = true;
    if (this_present_numRequests || that_present_numRequests) {
      if (!(this_present_numRequests && that_present_numRequests))
        return false;
      if (this.numRequests != that.numRequests)
        return false;
    }

    boolean this_present_numTxnTimeouts = true;
    boolean that_present_numTxnTimeouts = true;
    if (this_present_numTxnTimeouts || that_present_numTxnTimeouts) {
      if (!(this_present_numTxnTimeouts && that_present_numTxnTimeouts))
        return false;
      if (this.numTxnTimeouts != that.numTxnTimeouts)
        return false;
    }

    boolean this_present_numUpgrade = true;
    boolean that_present_numUpgrade = true;
    if (this_present_numUpgrade || that_present_numUpgrade) {
      if (!(this_present_numUpgrade && that_present_numUpgrade))
        return false;
      if (this.numUpgrade != that.numUpgrade)
        return false;
    }

    boolean this_present_objects = true;
    boolean that_present_objects = true;
    if (this_present_objects || that_present_objects) {
      if (!(this_present_objects && that_present_objects))
        return false;
      if (this.objects != that.objects)
        return false;
    }

    boolean this_present_objectsteals = true;
    boolean that_present_objectsteals = true;
    if (this_present_objectsteals || that_present_objectsteals) {
      if (!(this_present_objectsteals && that_present_objectsteals))
        return false;
      if (this.objectsteals != that.objectsteals)
        return false;
    }

    boolean this_present_objsNowait = true;
    boolean that_present_objsNowait = true;
    if (this_present_objsNowait || that_present_objsNowait) {
      if (!(this_present_objsNowait && that_present_objsNowait))
        return false;
      if (this.objsNowait != that.objsNowait)
        return false;
    }

    boolean this_present_objsWait = true;
    boolean that_present_objsWait = true;
    if (this_present_objsWait || that_present_objsWait) {
      if (!(this_present_objsWait && that_present_objsWait))
        return false;
      if (this.objsWait != that.objsWait)
        return false;
    }

    boolean this_present_partitions = true;
    boolean that_present_partitions = true;
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (this.partitions != that.partitions)
        return false;
    }

    boolean this_present_partMaxNowait = true;
    boolean that_present_partMaxNowait = true;
    if (this_present_partMaxNowait || that_present_partMaxNowait) {
      if (!(this_present_partMaxNowait && that_present_partMaxNowait))
        return false;
      if (this.partMaxNowait != that.partMaxNowait)
        return false;
    }

    boolean this_present_partMaxWait = true;
    boolean that_present_partMaxWait = true;
    if (this_present_partMaxWait || that_present_partMaxWait) {
      if (!(this_present_partMaxWait && that_present_partMaxWait))
        return false;
      if (this.partMaxWait != that.partMaxWait)
        return false;
    }

    boolean this_present_partNowait = true;
    boolean that_present_partNowait = true;
    if (this_present_partNowait || that_present_partNowait) {
      if (!(this_present_partNowait && that_present_partNowait))
        return false;
      if (this.partNowait != that.partNowait)
        return false;
    }

    boolean this_present_partWait = true;
    boolean that_present_partWait = true;
    if (this_present_partWait || that_present_partWait) {
      if (!(this_present_partWait && that_present_partWait))
        return false;
      if (this.partWait != that.partWait)
        return false;
    }

    boolean this_present_regionNowait = true;
    boolean that_present_regionNowait = true;
    if (this_present_regionNowait || that_present_regionNowait) {
      if (!(this_present_regionNowait && that_present_regionNowait))
        return false;
      if (this.regionNowait != that.regionNowait)
        return false;
    }

    boolean this_present_regionWait = true;
    boolean that_present_regionWait = true;
    if (this_present_regionWait || that_present_regionWait) {
      if (!(this_present_regionWait && that_present_regionWait))
        return false;
      if (this.regionWait != that.regionWait)
        return false;
    }

    boolean this_present_regSize = true;
    boolean that_present_regSize = true;
    if (this_present_regSize || that_present_regSize) {
      if (!(this_present_regSize && that_present_regSize))
        return false;
      if (this.regSize != that.regSize)
        return false;
    }

    boolean this_present_tableSize = true;
    boolean that_present_tableSize = true;
    if (this_present_tableSize || that_present_tableSize) {
      if (!(this_present_tableSize && that_present_tableSize))
        return false;
      if (this.tableSize != that.tableSize)
        return false;
    }

    boolean this_present_txnTimeout = true;
    boolean that_present_txnTimeout = true;
    if (this_present_txnTimeout || that_present_txnTimeout) {
      if (!(this_present_txnTimeout && that_present_txnTimeout))
        return false;
      if (this.txnTimeout != that.txnTimeout)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + curMaxId;

    hashCode = hashCode * 8191 + hashLen;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + initlockers;

    hashCode = hashCode * 8191 + initlocks;

    hashCode = hashCode * 8191 + initobjects;

    hashCode = hashCode * 8191 + lockers;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lockersNowait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lockersWait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lockNowait);

    hashCode = hashCode * 8191 + locks;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(locksteals);

    hashCode = hashCode * 8191 + lockTimeout;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lockWait);

    hashCode = hashCode * 8191 + maxHlocks;

    hashCode = hashCode * 8191 + maxHobjects;

    hashCode = hashCode * 8191 + maxLockers;

    hashCode = hashCode * 8191 + maxLocks;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxLsteals);

    hashCode = hashCode * 8191 + maxNlockers;

    hashCode = hashCode * 8191 + maxNlocks;

    hashCode = hashCode * 8191 + maxNobjects;

    hashCode = hashCode * 8191 + maxObjects;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxOsteals);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numDeadlocks);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numDowngrade);

    hashCode = hashCode * 8191 + numLockers;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numLockersHit);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numLockersReused);

    hashCode = hashCode * 8191 + numLocks;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numLockTimeouts);

    hashCode = hashCode * 8191 + numModes;

    hashCode = hashCode * 8191 + nobjects;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numReleases);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numRequests);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numTxnTimeouts);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numUpgrade);

    hashCode = hashCode * 8191 + objects;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(objectsteals);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(objsNowait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(objsWait);

    hashCode = hashCode * 8191 + partitions;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partMaxNowait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partMaxWait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partNowait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partWait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(regionNowait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(regionWait);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(regSize);

    hashCode = hashCode * 8191 + tableSize;

    hashCode = hashCode * 8191 + txnTimeout;

    return hashCode;
  }

  @Override
  public int compareTo(TLockStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCurMaxId()).compareTo(other.isSetCurMaxId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurMaxId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curMaxId, other.curMaxId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHashLen()).compareTo(other.isSetHashLen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashLen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashLen, other.hashLen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInitlockers()).compareTo(other.isSetInitlockers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitlockers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initlockers, other.initlockers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInitlocks()).compareTo(other.isSetInitlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initlocks, other.initlocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInitobjects()).compareTo(other.isSetInitobjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitobjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initobjects, other.initobjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLockers()).compareTo(other.isSetLockers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockers, other.lockers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLockersNowait()).compareTo(other.isSetLockersNowait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockersNowait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockersNowait, other.lockersNowait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLockersWait()).compareTo(other.isSetLockersWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockersWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockersWait, other.lockersWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLockNowait()).compareTo(other.isSetLockNowait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockNowait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockNowait, other.lockNowait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocks()).compareTo(other.isSetLocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locks, other.locks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocksteals()).compareTo(other.isSetLocksteals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocksteals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locksteals, other.locksteals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLockTimeout()).compareTo(other.isSetLockTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockTimeout, other.lockTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLockWait()).compareTo(other.isSetLockWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockWait, other.lockWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxHlocks()).compareTo(other.isSetMaxHlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxHlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxHlocks, other.maxHlocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxHobjects()).compareTo(other.isSetMaxHobjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxHobjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxHobjects, other.maxHobjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxLockers()).compareTo(other.isSetMaxLockers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLockers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLockers, other.maxLockers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxLocks()).compareTo(other.isSetMaxLocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLocks, other.maxLocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxLsteals()).compareTo(other.isSetMaxLsteals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLsteals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLsteals, other.maxLsteals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxNlockers()).compareTo(other.isSetMaxNlockers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNlockers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNlockers, other.maxNlockers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxNlocks()).compareTo(other.isSetMaxNlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNlocks, other.maxNlocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxNobjects()).compareTo(other.isSetMaxNobjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNobjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNobjects, other.maxNobjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxObjects()).compareTo(other.isSetMaxObjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxObjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxObjects, other.maxObjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxOsteals()).compareTo(other.isSetMaxOsteals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxOsteals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxOsteals, other.maxOsteals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumDeadlocks()).compareTo(other.isSetNumDeadlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumDeadlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numDeadlocks, other.numDeadlocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumDowngrade()).compareTo(other.isSetNumDowngrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumDowngrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numDowngrade, other.numDowngrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumLockers()).compareTo(other.isSetNumLockers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumLockers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLockers, other.numLockers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumLockersHit()).compareTo(other.isSetNumLockersHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumLockersHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLockersHit, other.numLockersHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumLockersReused()).compareTo(other.isSetNumLockersReused());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumLockersReused()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLockersReused, other.numLockersReused);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumLocks()).compareTo(other.isSetNumLocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumLocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLocks, other.numLocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumLockTimeouts()).compareTo(other.isSetNumLockTimeouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumLockTimeouts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLockTimeouts, other.numLockTimeouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumModes()).compareTo(other.isSetNumModes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumModes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numModes, other.numModes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNobjects()).compareTo(other.isSetNobjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNobjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nobjects, other.nobjects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumReleases()).compareTo(other.isSetNumReleases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumReleases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numReleases, other.numReleases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumRequests()).compareTo(other.isSetNumRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRequests, other.numRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumTxnTimeouts()).compareTo(other.isSetNumTxnTimeouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumTxnTimeouts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numTxnTimeouts, other.numTxnTimeouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumUpgrade()).compareTo(other.isSetNumUpgrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumUpgrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numUpgrade, other.numUpgrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObjects()).compareTo(other.isSetObjects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objects, other.objects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObjectsteals()).compareTo(other.isSetObjectsteals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectsteals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectsteals, other.objectsteals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObjsNowait()).compareTo(other.isSetObjsNowait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjsNowait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objsNowait, other.objsNowait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObjsWait()).compareTo(other.isSetObjsWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjsWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objsWait, other.objsWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartitions()).compareTo(other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartMaxNowait()).compareTo(other.isSetPartMaxNowait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartMaxNowait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partMaxNowait, other.partMaxNowait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartMaxWait()).compareTo(other.isSetPartMaxWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartMaxWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partMaxWait, other.partMaxWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartNowait()).compareTo(other.isSetPartNowait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartNowait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partNowait, other.partNowait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartWait()).compareTo(other.isSetPartWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partWait, other.partWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegionNowait()).compareTo(other.isSetRegionNowait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionNowait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionNowait, other.regionNowait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegionWait()).compareTo(other.isSetRegionWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionWait, other.regionWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegSize()).compareTo(other.isSetRegSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regSize, other.regSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTableSize()).compareTo(other.isSetTableSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableSize, other.tableSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTxnTimeout()).compareTo(other.isSetTxnTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnTimeout, other.txnTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TLockStat(");
    boolean first = true;

    sb.append("curMaxId:");
    sb.append(this.curMaxId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hashLen:");
    sb.append(this.hashLen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("initlockers:");
    sb.append(this.initlockers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("initlocks:");
    sb.append(this.initlocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("initobjects:");
    sb.append(this.initobjects);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockers:");
    sb.append(this.lockers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockersNowait:");
    sb.append(this.lockersNowait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockersWait:");
    sb.append(this.lockersWait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockNowait:");
    sb.append(this.lockNowait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locks:");
    sb.append(this.locks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locksteals:");
    sb.append(this.locksteals);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockTimeout:");
    sb.append(this.lockTimeout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockWait:");
    sb.append(this.lockWait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxHlocks:");
    sb.append(this.maxHlocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxHobjects:");
    sb.append(this.maxHobjects);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxLockers:");
    sb.append(this.maxLockers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxLocks:");
    sb.append(this.maxLocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxLsteals:");
    sb.append(this.maxLsteals);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxNlockers:");
    sb.append(this.maxNlockers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxNlocks:");
    sb.append(this.maxNlocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxNobjects:");
    sb.append(this.maxNobjects);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxObjects:");
    sb.append(this.maxObjects);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxOsteals:");
    sb.append(this.maxOsteals);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numDeadlocks:");
    sb.append(this.numDeadlocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numDowngrade:");
    sb.append(this.numDowngrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numLockers:");
    sb.append(this.numLockers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numLockersHit:");
    sb.append(this.numLockersHit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numLockersReused:");
    sb.append(this.numLockersReused);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numLocks:");
    sb.append(this.numLocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numLockTimeouts:");
    sb.append(this.numLockTimeouts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numModes:");
    sb.append(this.numModes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nobjects:");
    sb.append(this.nobjects);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numReleases:");
    sb.append(this.numReleases);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numRequests:");
    sb.append(this.numRequests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numTxnTimeouts:");
    sb.append(this.numTxnTimeouts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numUpgrade:");
    sb.append(this.numUpgrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("objects:");
    sb.append(this.objects);
    first = false;
    if (!first) sb.append(", ");
    sb.append("objectsteals:");
    sb.append(this.objectsteals);
    first = false;
    if (!first) sb.append(", ");
    sb.append("objsNowait:");
    sb.append(this.objsNowait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("objsWait:");
    sb.append(this.objsWait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitions:");
    sb.append(this.partitions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partMaxNowait:");
    sb.append(this.partMaxNowait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partMaxWait:");
    sb.append(this.partMaxWait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partNowait:");
    sb.append(this.partNowait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partWait:");
    sb.append(this.partWait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionNowait:");
    sb.append(this.regionNowait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionWait:");
    sb.append(this.regionWait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regSize:");
    sb.append(this.regSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableSize:");
    sb.append(this.tableSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txnTimeout:");
    sb.append(this.txnTimeout);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLockStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TLockStatStandardScheme getScheme() {
      return new TLockStatStandardScheme();
    }
  }

  private static class TLockStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<TLockStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLockStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUR_MAX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curMaxId = iprot.readI32();
              struct.setCurMaxIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HASH_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hashLen = iprot.readI32();
              struct.setHashLenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INITLOCKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.initlockers = iprot.readI32();
              struct.setInitlockersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INITLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.initlocks = iprot.readI32();
              struct.setInitlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INITOBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.initobjects = iprot.readI32();
              struct.setInitobjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lockers = iprot.readI32();
              struct.setLockersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOCKERS_NOWAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lockersNowait = iprot.readI64();
              struct.setLockersNowaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOCKERS_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lockersWait = iprot.readI64();
              struct.setLockersWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOCK_NOWAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lockNowait = iprot.readI64();
              struct.setLockNowaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locks = iprot.readI32();
              struct.setLocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOCKSTEALS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.locksteals = iprot.readI64();
              struct.setLockstealsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOCK_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lockTimeout = iprot.readI32();
              struct.setLockTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOCK_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lockWait = iprot.readI64();
              struct.setLockWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MAX_HLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxHlocks = iprot.readI32();
              struct.setMaxHlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MAX_HOBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxHobjects = iprot.readI32();
              struct.setMaxHobjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAX_LOCKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxLockers = iprot.readI32();
              struct.setMaxLockersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAX_LOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxLocks = iprot.readI32();
              struct.setMaxLocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MAX_LSTEALS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxLsteals = iprot.readI64();
              struct.setMaxLstealsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MAX_NLOCKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxNlockers = iprot.readI32();
              struct.setMaxNlockersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MAX_NLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxNlocks = iprot.readI32();
              struct.setMaxNlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MAX_NOBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxNobjects = iprot.readI32();
              struct.setMaxNobjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MAX_OBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxObjects = iprot.readI32();
              struct.setMaxObjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MAX_OSTEALS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxOsteals = iprot.readI64();
              struct.setMaxOstealsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // NUM_DEADLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numDeadlocks = iprot.readI64();
              struct.setNumDeadlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // NUM_DOWNGRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numDowngrade = iprot.readI64();
              struct.setNumDowngradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // NUM_LOCKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numLockers = iprot.readI32();
              struct.setNumLockersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // NUM_LOCKERS_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numLockersHit = iprot.readI64();
              struct.setNumLockersHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // NUM_LOCKERS_REUSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numLockersReused = iprot.readI64();
              struct.setNumLockersReusedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // NUM_LOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numLocks = iprot.readI32();
              struct.setNumLocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // NUM_LOCK_TIMEOUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numLockTimeouts = iprot.readI64();
              struct.setNumLockTimeoutsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // NUM_MODES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numModes = iprot.readI32();
              struct.setNumModesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // NOBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nobjects = iprot.readI32();
              struct.setNobjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // NUM_RELEASES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numReleases = iprot.readI64();
              struct.setNumReleasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // NUM_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numRequests = iprot.readI64();
              struct.setNumRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // NUM_TXN_TIMEOUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numTxnTimeouts = iprot.readI64();
              struct.setNumTxnTimeoutsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // NUM_UPGRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numUpgrade = iprot.readI64();
              struct.setNumUpgradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // OBJECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.objects = iprot.readI32();
              struct.setObjectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // OBJECTSTEALS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.objectsteals = iprot.readI64();
              struct.setObjectstealsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // OBJS_NOWAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.objsNowait = iprot.readI64();
              struct.setObjsNowaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // OBJS_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.objsWait = iprot.readI64();
              struct.setObjsWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partitions = iprot.readI32();
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PART_MAX_NOWAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partMaxNowait = iprot.readI64();
              struct.setPartMaxNowaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // PART_MAX_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partMaxWait = iprot.readI64();
              struct.setPartMaxWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // PART_NOWAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partNowait = iprot.readI64();
              struct.setPartNowaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // PART_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partWait = iprot.readI64();
              struct.setPartWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // REGION_NOWAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regionNowait = iprot.readI64();
              struct.setRegionNowaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // REGION_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regionWait = iprot.readI64();
              struct.setRegionWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // REG_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regSize = iprot.readI64();
              struct.setRegSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // TABLE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tableSize = iprot.readI32();
              struct.setTableSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // TXN_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.txnTimeout = iprot.readI32();
              struct.setTxnTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLockStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CUR_MAX_ID_FIELD_DESC);
      oprot.writeI32(struct.curMaxId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HASH_LEN_FIELD_DESC);
      oprot.writeI32(struct.hashLen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INITLOCKERS_FIELD_DESC);
      oprot.writeI32(struct.initlockers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INITLOCKS_FIELD_DESC);
      oprot.writeI32(struct.initlocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INITOBJECTS_FIELD_DESC);
      oprot.writeI32(struct.initobjects);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCKERS_FIELD_DESC);
      oprot.writeI32(struct.lockers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCKERS_NOWAIT_FIELD_DESC);
      oprot.writeI64(struct.lockersNowait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCKERS_WAIT_FIELD_DESC);
      oprot.writeI64(struct.lockersWait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCK_NOWAIT_FIELD_DESC);
      oprot.writeI64(struct.lockNowait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCKS_FIELD_DESC);
      oprot.writeI32(struct.locks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCKSTEALS_FIELD_DESC);
      oprot.writeI64(struct.locksteals);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCK_TIMEOUT_FIELD_DESC);
      oprot.writeI32(struct.lockTimeout);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCK_WAIT_FIELD_DESC);
      oprot.writeI64(struct.lockWait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_HLOCKS_FIELD_DESC);
      oprot.writeI32(struct.maxHlocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_HOBJECTS_FIELD_DESC);
      oprot.writeI32(struct.maxHobjects);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_LOCKERS_FIELD_DESC);
      oprot.writeI32(struct.maxLockers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_LOCKS_FIELD_DESC);
      oprot.writeI32(struct.maxLocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_LSTEALS_FIELD_DESC);
      oprot.writeI64(struct.maxLsteals);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NLOCKERS_FIELD_DESC);
      oprot.writeI32(struct.maxNlockers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NLOCKS_FIELD_DESC);
      oprot.writeI32(struct.maxNlocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NOBJECTS_FIELD_DESC);
      oprot.writeI32(struct.maxNobjects);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_OBJECTS_FIELD_DESC);
      oprot.writeI32(struct.maxObjects);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_OSTEALS_FIELD_DESC);
      oprot.writeI64(struct.maxOsteals);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_DEADLOCKS_FIELD_DESC);
      oprot.writeI64(struct.numDeadlocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_DOWNGRADE_FIELD_DESC);
      oprot.writeI64(struct.numDowngrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_LOCKERS_FIELD_DESC);
      oprot.writeI32(struct.numLockers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_LOCKERS_HIT_FIELD_DESC);
      oprot.writeI64(struct.numLockersHit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_LOCKERS_REUSED_FIELD_DESC);
      oprot.writeI64(struct.numLockersReused);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_LOCKS_FIELD_DESC);
      oprot.writeI32(struct.numLocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_LOCK_TIMEOUTS_FIELD_DESC);
      oprot.writeI64(struct.numLockTimeouts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_MODES_FIELD_DESC);
      oprot.writeI32(struct.numModes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOBJECTS_FIELD_DESC);
      oprot.writeI32(struct.nobjects);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_RELEASES_FIELD_DESC);
      oprot.writeI64(struct.numReleases);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_REQUESTS_FIELD_DESC);
      oprot.writeI64(struct.numRequests);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_TXN_TIMEOUTS_FIELD_DESC);
      oprot.writeI64(struct.numTxnTimeouts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_UPGRADE_FIELD_DESC);
      oprot.writeI64(struct.numUpgrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OBJECTS_FIELD_DESC);
      oprot.writeI32(struct.objects);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OBJECTSTEALS_FIELD_DESC);
      oprot.writeI64(struct.objectsteals);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OBJS_NOWAIT_FIELD_DESC);
      oprot.writeI64(struct.objsNowait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OBJS_WAIT_FIELD_DESC);
      oprot.writeI64(struct.objsWait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
      oprot.writeI32(struct.partitions);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PART_MAX_NOWAIT_FIELD_DESC);
      oprot.writeI64(struct.partMaxNowait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PART_MAX_WAIT_FIELD_DESC);
      oprot.writeI64(struct.partMaxWait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PART_NOWAIT_FIELD_DESC);
      oprot.writeI64(struct.partNowait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PART_WAIT_FIELD_DESC);
      oprot.writeI64(struct.partWait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGION_NOWAIT_FIELD_DESC);
      oprot.writeI64(struct.regionNowait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGION_WAIT_FIELD_DESC);
      oprot.writeI64(struct.regionWait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REG_SIZE_FIELD_DESC);
      oprot.writeI64(struct.regSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.tableSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TXN_TIMEOUT_FIELD_DESC);
      oprot.writeI32(struct.txnTimeout);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLockStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TLockStatTupleScheme getScheme() {
      return new TLockStatTupleScheme();
    }
  }

  private static class TLockStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<TLockStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLockStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCurMaxId()) {
        optionals.set(0);
      }
      if (struct.isSetHashLen()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetInitlockers()) {
        optionals.set(3);
      }
      if (struct.isSetInitlocks()) {
        optionals.set(4);
      }
      if (struct.isSetInitobjects()) {
        optionals.set(5);
      }
      if (struct.isSetLockers()) {
        optionals.set(6);
      }
      if (struct.isSetLockersNowait()) {
        optionals.set(7);
      }
      if (struct.isSetLockersWait()) {
        optionals.set(8);
      }
      if (struct.isSetLockNowait()) {
        optionals.set(9);
      }
      if (struct.isSetLocks()) {
        optionals.set(10);
      }
      if (struct.isSetLocksteals()) {
        optionals.set(11);
      }
      if (struct.isSetLockTimeout()) {
        optionals.set(12);
      }
      if (struct.isSetLockWait()) {
        optionals.set(13);
      }
      if (struct.isSetMaxHlocks()) {
        optionals.set(14);
      }
      if (struct.isSetMaxHobjects()) {
        optionals.set(15);
      }
      if (struct.isSetMaxLockers()) {
        optionals.set(16);
      }
      if (struct.isSetMaxLocks()) {
        optionals.set(17);
      }
      if (struct.isSetMaxLsteals()) {
        optionals.set(18);
      }
      if (struct.isSetMaxNlockers()) {
        optionals.set(19);
      }
      if (struct.isSetMaxNlocks()) {
        optionals.set(20);
      }
      if (struct.isSetMaxNobjects()) {
        optionals.set(21);
      }
      if (struct.isSetMaxObjects()) {
        optionals.set(22);
      }
      if (struct.isSetMaxOsteals()) {
        optionals.set(23);
      }
      if (struct.isSetNumDeadlocks()) {
        optionals.set(24);
      }
      if (struct.isSetNumDowngrade()) {
        optionals.set(25);
      }
      if (struct.isSetNumLockers()) {
        optionals.set(26);
      }
      if (struct.isSetNumLockersHit()) {
        optionals.set(27);
      }
      if (struct.isSetNumLockersReused()) {
        optionals.set(28);
      }
      if (struct.isSetNumLocks()) {
        optionals.set(29);
      }
      if (struct.isSetNumLockTimeouts()) {
        optionals.set(30);
      }
      if (struct.isSetNumModes()) {
        optionals.set(31);
      }
      if (struct.isSetNobjects()) {
        optionals.set(32);
      }
      if (struct.isSetNumReleases()) {
        optionals.set(33);
      }
      if (struct.isSetNumRequests()) {
        optionals.set(34);
      }
      if (struct.isSetNumTxnTimeouts()) {
        optionals.set(35);
      }
      if (struct.isSetNumUpgrade()) {
        optionals.set(36);
      }
      if (struct.isSetObjects()) {
        optionals.set(37);
      }
      if (struct.isSetObjectsteals()) {
        optionals.set(38);
      }
      if (struct.isSetObjsNowait()) {
        optionals.set(39);
      }
      if (struct.isSetObjsWait()) {
        optionals.set(40);
      }
      if (struct.isSetPartitions()) {
        optionals.set(41);
      }
      if (struct.isSetPartMaxNowait()) {
        optionals.set(42);
      }
      if (struct.isSetPartMaxWait()) {
        optionals.set(43);
      }
      if (struct.isSetPartNowait()) {
        optionals.set(44);
      }
      if (struct.isSetPartWait()) {
        optionals.set(45);
      }
      if (struct.isSetRegionNowait()) {
        optionals.set(46);
      }
      if (struct.isSetRegionWait()) {
        optionals.set(47);
      }
      if (struct.isSetRegSize()) {
        optionals.set(48);
      }
      if (struct.isSetTableSize()) {
        optionals.set(49);
      }
      if (struct.isSetTxnTimeout()) {
        optionals.set(50);
      }
      oprot.writeBitSet(optionals, 51);
      if (struct.isSetCurMaxId()) {
        oprot.writeI32(struct.curMaxId);
      }
      if (struct.isSetHashLen()) {
        oprot.writeI32(struct.hashLen);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetInitlockers()) {
        oprot.writeI32(struct.initlockers);
      }
      if (struct.isSetInitlocks()) {
        oprot.writeI32(struct.initlocks);
      }
      if (struct.isSetInitobjects()) {
        oprot.writeI32(struct.initobjects);
      }
      if (struct.isSetLockers()) {
        oprot.writeI32(struct.lockers);
      }
      if (struct.isSetLockersNowait()) {
        oprot.writeI64(struct.lockersNowait);
      }
      if (struct.isSetLockersWait()) {
        oprot.writeI64(struct.lockersWait);
      }
      if (struct.isSetLockNowait()) {
        oprot.writeI64(struct.lockNowait);
      }
      if (struct.isSetLocks()) {
        oprot.writeI32(struct.locks);
      }
      if (struct.isSetLocksteals()) {
        oprot.writeI64(struct.locksteals);
      }
      if (struct.isSetLockTimeout()) {
        oprot.writeI32(struct.lockTimeout);
      }
      if (struct.isSetLockWait()) {
        oprot.writeI64(struct.lockWait);
      }
      if (struct.isSetMaxHlocks()) {
        oprot.writeI32(struct.maxHlocks);
      }
      if (struct.isSetMaxHobjects()) {
        oprot.writeI32(struct.maxHobjects);
      }
      if (struct.isSetMaxLockers()) {
        oprot.writeI32(struct.maxLockers);
      }
      if (struct.isSetMaxLocks()) {
        oprot.writeI32(struct.maxLocks);
      }
      if (struct.isSetMaxLsteals()) {
        oprot.writeI64(struct.maxLsteals);
      }
      if (struct.isSetMaxNlockers()) {
        oprot.writeI32(struct.maxNlockers);
      }
      if (struct.isSetMaxNlocks()) {
        oprot.writeI32(struct.maxNlocks);
      }
      if (struct.isSetMaxNobjects()) {
        oprot.writeI32(struct.maxNobjects);
      }
      if (struct.isSetMaxObjects()) {
        oprot.writeI32(struct.maxObjects);
      }
      if (struct.isSetMaxOsteals()) {
        oprot.writeI64(struct.maxOsteals);
      }
      if (struct.isSetNumDeadlocks()) {
        oprot.writeI64(struct.numDeadlocks);
      }
      if (struct.isSetNumDowngrade()) {
        oprot.writeI64(struct.numDowngrade);
      }
      if (struct.isSetNumLockers()) {
        oprot.writeI32(struct.numLockers);
      }
      if (struct.isSetNumLockersHit()) {
        oprot.writeI64(struct.numLockersHit);
      }
      if (struct.isSetNumLockersReused()) {
        oprot.writeI64(struct.numLockersReused);
      }
      if (struct.isSetNumLocks()) {
        oprot.writeI32(struct.numLocks);
      }
      if (struct.isSetNumLockTimeouts()) {
        oprot.writeI64(struct.numLockTimeouts);
      }
      if (struct.isSetNumModes()) {
        oprot.writeI32(struct.numModes);
      }
      if (struct.isSetNobjects()) {
        oprot.writeI32(struct.nobjects);
      }
      if (struct.isSetNumReleases()) {
        oprot.writeI64(struct.numReleases);
      }
      if (struct.isSetNumRequests()) {
        oprot.writeI64(struct.numRequests);
      }
      if (struct.isSetNumTxnTimeouts()) {
        oprot.writeI64(struct.numTxnTimeouts);
      }
      if (struct.isSetNumUpgrade()) {
        oprot.writeI64(struct.numUpgrade);
      }
      if (struct.isSetObjects()) {
        oprot.writeI32(struct.objects);
      }
      if (struct.isSetObjectsteals()) {
        oprot.writeI64(struct.objectsteals);
      }
      if (struct.isSetObjsNowait()) {
        oprot.writeI64(struct.objsNowait);
      }
      if (struct.isSetObjsWait()) {
        oprot.writeI64(struct.objsWait);
      }
      if (struct.isSetPartitions()) {
        oprot.writeI32(struct.partitions);
      }
      if (struct.isSetPartMaxNowait()) {
        oprot.writeI64(struct.partMaxNowait);
      }
      if (struct.isSetPartMaxWait()) {
        oprot.writeI64(struct.partMaxWait);
      }
      if (struct.isSetPartNowait()) {
        oprot.writeI64(struct.partNowait);
      }
      if (struct.isSetPartWait()) {
        oprot.writeI64(struct.partWait);
      }
      if (struct.isSetRegionNowait()) {
        oprot.writeI64(struct.regionNowait);
      }
      if (struct.isSetRegionWait()) {
        oprot.writeI64(struct.regionWait);
      }
      if (struct.isSetRegSize()) {
        oprot.writeI64(struct.regSize);
      }
      if (struct.isSetTableSize()) {
        oprot.writeI32(struct.tableSize);
      }
      if (struct.isSetTxnTimeout()) {
        oprot.writeI32(struct.txnTimeout);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLockStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(51);
      if (incoming.get(0)) {
        struct.curMaxId = iprot.readI32();
        struct.setCurMaxIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hashLen = iprot.readI32();
        struct.setHashLenIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.initlockers = iprot.readI32();
        struct.setInitlockersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.initlocks = iprot.readI32();
        struct.setInitlocksIsSet(true);
      }
      if (incoming.get(5)) {
        struct.initobjects = iprot.readI32();
        struct.setInitobjectsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lockers = iprot.readI32();
        struct.setLockersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lockersNowait = iprot.readI64();
        struct.setLockersNowaitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lockersWait = iprot.readI64();
        struct.setLockersWaitIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lockNowait = iprot.readI64();
        struct.setLockNowaitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.locks = iprot.readI32();
        struct.setLocksIsSet(true);
      }
      if (incoming.get(11)) {
        struct.locksteals = iprot.readI64();
        struct.setLockstealsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lockTimeout = iprot.readI32();
        struct.setLockTimeoutIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lockWait = iprot.readI64();
        struct.setLockWaitIsSet(true);
      }
      if (incoming.get(14)) {
        struct.maxHlocks = iprot.readI32();
        struct.setMaxHlocksIsSet(true);
      }
      if (incoming.get(15)) {
        struct.maxHobjects = iprot.readI32();
        struct.setMaxHobjectsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.maxLockers = iprot.readI32();
        struct.setMaxLockersIsSet(true);
      }
      if (incoming.get(17)) {
        struct.maxLocks = iprot.readI32();
        struct.setMaxLocksIsSet(true);
      }
      if (incoming.get(18)) {
        struct.maxLsteals = iprot.readI64();
        struct.setMaxLstealsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.maxNlockers = iprot.readI32();
        struct.setMaxNlockersIsSet(true);
      }
      if (incoming.get(20)) {
        struct.maxNlocks = iprot.readI32();
        struct.setMaxNlocksIsSet(true);
      }
      if (incoming.get(21)) {
        struct.maxNobjects = iprot.readI32();
        struct.setMaxNobjectsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.maxObjects = iprot.readI32();
        struct.setMaxObjectsIsSet(true);
      }
      if (incoming.get(23)) {
        struct.maxOsteals = iprot.readI64();
        struct.setMaxOstealsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.numDeadlocks = iprot.readI64();
        struct.setNumDeadlocksIsSet(true);
      }
      if (incoming.get(25)) {
        struct.numDowngrade = iprot.readI64();
        struct.setNumDowngradeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.numLockers = iprot.readI32();
        struct.setNumLockersIsSet(true);
      }
      if (incoming.get(27)) {
        struct.numLockersHit = iprot.readI64();
        struct.setNumLockersHitIsSet(true);
      }
      if (incoming.get(28)) {
        struct.numLockersReused = iprot.readI64();
        struct.setNumLockersReusedIsSet(true);
      }
      if (incoming.get(29)) {
        struct.numLocks = iprot.readI32();
        struct.setNumLocksIsSet(true);
      }
      if (incoming.get(30)) {
        struct.numLockTimeouts = iprot.readI64();
        struct.setNumLockTimeoutsIsSet(true);
      }
      if (incoming.get(31)) {
        struct.numModes = iprot.readI32();
        struct.setNumModesIsSet(true);
      }
      if (incoming.get(32)) {
        struct.nobjects = iprot.readI32();
        struct.setNobjectsIsSet(true);
      }
      if (incoming.get(33)) {
        struct.numReleases = iprot.readI64();
        struct.setNumReleasesIsSet(true);
      }
      if (incoming.get(34)) {
        struct.numRequests = iprot.readI64();
        struct.setNumRequestsIsSet(true);
      }
      if (incoming.get(35)) {
        struct.numTxnTimeouts = iprot.readI64();
        struct.setNumTxnTimeoutsIsSet(true);
      }
      if (incoming.get(36)) {
        struct.numUpgrade = iprot.readI64();
        struct.setNumUpgradeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.objects = iprot.readI32();
        struct.setObjectsIsSet(true);
      }
      if (incoming.get(38)) {
        struct.objectsteals = iprot.readI64();
        struct.setObjectstealsIsSet(true);
      }
      if (incoming.get(39)) {
        struct.objsNowait = iprot.readI64();
        struct.setObjsNowaitIsSet(true);
      }
      if (incoming.get(40)) {
        struct.objsWait = iprot.readI64();
        struct.setObjsWaitIsSet(true);
      }
      if (incoming.get(41)) {
        struct.partitions = iprot.readI32();
        struct.setPartitionsIsSet(true);
      }
      if (incoming.get(42)) {
        struct.partMaxNowait = iprot.readI64();
        struct.setPartMaxNowaitIsSet(true);
      }
      if (incoming.get(43)) {
        struct.partMaxWait = iprot.readI64();
        struct.setPartMaxWaitIsSet(true);
      }
      if (incoming.get(44)) {
        struct.partNowait = iprot.readI64();
        struct.setPartNowaitIsSet(true);
      }
      if (incoming.get(45)) {
        struct.partWait = iprot.readI64();
        struct.setPartWaitIsSet(true);
      }
      if (incoming.get(46)) {
        struct.regionNowait = iprot.readI64();
        struct.setRegionNowaitIsSet(true);
      }
      if (incoming.get(47)) {
        struct.regionWait = iprot.readI64();
        struct.setRegionWaitIsSet(true);
      }
      if (incoming.get(48)) {
        struct.regSize = iprot.readI64();
        struct.setRegSizeIsSet(true);
      }
      if (incoming.get(49)) {
        struct.tableSize = iprot.readI32();
        struct.setTableSizeIsSet(true);
      }
      if (incoming.get(50)) {
        struct.txnTimeout = iprot.readI32();
        struct.setTxnTimeoutIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

