/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-25")
public class TKeyDataWithPKey implements org.apache.thrift.TBase<TKeyDataWithPKey, TKeyDataWithPKey._Fields>, java.io.Serializable, Cloneable, Comparable<TKeyDataWithPKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TKeyDataWithPKey");

  private static final org.apache.thrift.protocol.TField SKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("skey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pkey", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("pdata", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TKeyDataWithPKeyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TKeyDataWithPKeyTupleSchemeFactory();

  public TDbt skey; // optional
  public TDbt pkey; // optional
  public TDbt pdata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SKEY((short)1, "skey"),
    PKEY((short)2, "pkey"),
    PDATA((short)3, "pdata");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SKEY
          return SKEY;
        case 2: // PKEY
          return PKEY;
        case 3: // PDATA
          return PDATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SKEY,_Fields.PKEY,_Fields.PDATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SKEY, new org.apache.thrift.meta_data.FieldMetaData("skey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
    tmpMap.put(_Fields.PKEY, new org.apache.thrift.meta_data.FieldMetaData("pkey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
    tmpMap.put(_Fields.PDATA, new org.apache.thrift.meta_data.FieldMetaData("pdata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TKeyDataWithPKey.class, metaDataMap);
  }

  public TKeyDataWithPKey() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TKeyDataWithPKey(TKeyDataWithPKey other) {
    if (other.isSetSkey()) {
      this.skey = new TDbt(other.skey);
    }
    if (other.isSetPkey()) {
      this.pkey = new TDbt(other.pkey);
    }
    if (other.isSetPdata()) {
      this.pdata = new TDbt(other.pdata);
    }
  }

  public TKeyDataWithPKey deepCopy() {
    return new TKeyDataWithPKey(this);
  }

  @Override
  public void clear() {
    this.skey = null;
    this.pkey = null;
    this.pdata = null;
  }

  public TDbt getSkey() {
    return this.skey;
  }

  public TKeyDataWithPKey setSkey(TDbt skey) {
    this.skey = skey;
    return this;
  }

  public void unsetSkey() {
    this.skey = null;
  }

  /** Returns true if field skey is set (has been assigned a value) and false otherwise */
  public boolean isSetSkey() {
    return this.skey != null;
  }

  public void setSkeyIsSet(boolean value) {
    if (!value) {
      this.skey = null;
    }
  }

  public TDbt getPkey() {
    return this.pkey;
  }

  public TKeyDataWithPKey setPkey(TDbt pkey) {
    this.pkey = pkey;
    return this;
  }

  public void unsetPkey() {
    this.pkey = null;
  }

  /** Returns true if field pkey is set (has been assigned a value) and false otherwise */
  public boolean isSetPkey() {
    return this.pkey != null;
  }

  public void setPkeyIsSet(boolean value) {
    if (!value) {
      this.pkey = null;
    }
  }

  public TDbt getPdata() {
    return this.pdata;
  }

  public TKeyDataWithPKey setPdata(TDbt pdata) {
    this.pdata = pdata;
    return this;
  }

  public void unsetPdata() {
    this.pdata = null;
  }

  /** Returns true if field pdata is set (has been assigned a value) and false otherwise */
  public boolean isSetPdata() {
    return this.pdata != null;
  }

  public void setPdataIsSet(boolean value) {
    if (!value) {
      this.pdata = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SKEY:
      if (value == null) {
        unsetSkey();
      } else {
        setSkey((TDbt)value);
      }
      break;

    case PKEY:
      if (value == null) {
        unsetPkey();
      } else {
        setPkey((TDbt)value);
      }
      break;

    case PDATA:
      if (value == null) {
        unsetPdata();
      } else {
        setPdata((TDbt)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SKEY:
      return getSkey();

    case PKEY:
      return getPkey();

    case PDATA:
      return getPdata();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SKEY:
      return isSetSkey();
    case PKEY:
      return isSetPkey();
    case PDATA:
      return isSetPdata();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TKeyDataWithPKey)
      return this.equals((TKeyDataWithPKey)that);
    return false;
  }

  public boolean equals(TKeyDataWithPKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_skey = true && this.isSetSkey();
    boolean that_present_skey = true && that.isSetSkey();
    if (this_present_skey || that_present_skey) {
      if (!(this_present_skey && that_present_skey))
        return false;
      if (!this.skey.equals(that.skey))
        return false;
    }

    boolean this_present_pkey = true && this.isSetPkey();
    boolean that_present_pkey = true && that.isSetPkey();
    if (this_present_pkey || that_present_pkey) {
      if (!(this_present_pkey && that_present_pkey))
        return false;
      if (!this.pkey.equals(that.pkey))
        return false;
    }

    boolean this_present_pdata = true && this.isSetPdata();
    boolean that_present_pdata = true && that.isSetPdata();
    if (this_present_pdata || that_present_pdata) {
      if (!(this_present_pdata && that_present_pdata))
        return false;
      if (!this.pdata.equals(that.pdata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSkey()) ? 131071 : 524287);
    if (isSetSkey())
      hashCode = hashCode * 8191 + skey.hashCode();

    hashCode = hashCode * 8191 + ((isSetPkey()) ? 131071 : 524287);
    if (isSetPkey())
      hashCode = hashCode * 8191 + pkey.hashCode();

    hashCode = hashCode * 8191 + ((isSetPdata()) ? 131071 : 524287);
    if (isSetPdata())
      hashCode = hashCode * 8191 + pdata.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TKeyDataWithPKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSkey()).compareTo(other.isSetSkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skey, other.skey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPkey()).compareTo(other.isSetPkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pkey, other.pkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPdata()).compareTo(other.isSetPdata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPdata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pdata, other.pdata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TKeyDataWithPKey(");
    boolean first = true;

    if (isSetSkey()) {
      sb.append("skey:");
      if (this.skey == null) {
        sb.append("null");
      } else {
        sb.append(this.skey);
      }
      first = false;
    }
    if (isSetPkey()) {
      if (!first) sb.append(", ");
      sb.append("pkey:");
      if (this.pkey == null) {
        sb.append("null");
      } else {
        sb.append(this.pkey);
      }
      first = false;
    }
    if (isSetPdata()) {
      if (!first) sb.append(", ");
      sb.append("pdata:");
      if (this.pdata == null) {
        sb.append("null");
      } else {
        sb.append(this.pdata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (skey != null) {
      skey.validate();
    }
    if (pkey != null) {
      pkey.validate();
    }
    if (pdata != null) {
      pdata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TKeyDataWithPKeyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TKeyDataWithPKeyStandardScheme getScheme() {
      return new TKeyDataWithPKeyStandardScheme();
    }
  }

  private static class TKeyDataWithPKeyStandardScheme extends org.apache.thrift.scheme.StandardScheme<TKeyDataWithPKey> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TKeyDataWithPKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.skey = new TDbt();
              struct.skey.read(iprot);
              struct.setSkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pkey = new TDbt();
              struct.pkey.read(iprot);
              struct.setPkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pdata = new TDbt();
              struct.pdata.read(iprot);
              struct.setPdataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TKeyDataWithPKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.skey != null) {
        if (struct.isSetSkey()) {
          oprot.writeFieldBegin(SKEY_FIELD_DESC);
          struct.skey.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pkey != null) {
        if (struct.isSetPkey()) {
          oprot.writeFieldBegin(PKEY_FIELD_DESC);
          struct.pkey.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pdata != null) {
        if (struct.isSetPdata()) {
          oprot.writeFieldBegin(PDATA_FIELD_DESC);
          struct.pdata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TKeyDataWithPKeyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TKeyDataWithPKeyTupleScheme getScheme() {
      return new TKeyDataWithPKeyTupleScheme();
    }
  }

  private static class TKeyDataWithPKeyTupleScheme extends org.apache.thrift.scheme.TupleScheme<TKeyDataWithPKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TKeyDataWithPKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSkey()) {
        optionals.set(0);
      }
      if (struct.isSetPkey()) {
        optionals.set(1);
      }
      if (struct.isSetPdata()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSkey()) {
        struct.skey.write(oprot);
      }
      if (struct.isSetPkey()) {
        struct.pkey.write(oprot);
      }
      if (struct.isSetPdata()) {
        struct.pdata.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TKeyDataWithPKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.skey = new TDbt();
        struct.skey.read(iprot);
        struct.setSkeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pkey = new TDbt();
        struct.pkey.read(iprot);
        struct.setPkeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pdata = new TDbt();
        struct.pdata.read(iprot);
        struct.setPdataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

