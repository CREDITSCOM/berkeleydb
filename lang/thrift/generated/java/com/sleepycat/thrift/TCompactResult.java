/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-25")
public class TCompactResult implements org.apache.thrift.TBase<TCompactResult, TCompactResult._Fields>, java.io.Serializable, Cloneable, Comparable<TCompactResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCompactResult");

  private static final org.apache.thrift.protocol.TField DEADLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("deadlock", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EMPTY_BUCKETS_FIELD_DESC = new org.apache.thrift.protocol.TField("emptyBuckets", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LEVELS_FIELD_DESC = new org.apache.thrift.protocol.TField("levels", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGES_EXAMINE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesExamine", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PAGES_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesFree", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PAGES_TRUNCATED_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesTruncated", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("endKey", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCompactResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCompactResultTupleSchemeFactory();

  public int deadlock; // optional
  public int emptyBuckets; // optional
  public int levels; // optional
  public int pagesExamine; // optional
  public int pagesFree; // optional
  public int pagesTruncated; // optional
  public TDbt endKey; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEADLOCK((short)1, "deadlock"),
    EMPTY_BUCKETS((short)2, "emptyBuckets"),
    LEVELS((short)3, "levels"),
    PAGES_EXAMINE((short)4, "pagesExamine"),
    PAGES_FREE((short)5, "pagesFree"),
    PAGES_TRUNCATED((short)6, "pagesTruncated"),
    END_KEY((short)7, "endKey");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEADLOCK
          return DEADLOCK;
        case 2: // EMPTY_BUCKETS
          return EMPTY_BUCKETS;
        case 3: // LEVELS
          return LEVELS;
        case 4: // PAGES_EXAMINE
          return PAGES_EXAMINE;
        case 5: // PAGES_FREE
          return PAGES_FREE;
        case 6: // PAGES_TRUNCATED
          return PAGES_TRUNCATED;
        case 7: // END_KEY
          return END_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEADLOCK_ISSET_ID = 0;
  private static final int __EMPTYBUCKETS_ISSET_ID = 1;
  private static final int __LEVELS_ISSET_ID = 2;
  private static final int __PAGESEXAMINE_ISSET_ID = 3;
  private static final int __PAGESFREE_ISSET_ID = 4;
  private static final int __PAGESTRUNCATED_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEADLOCK,_Fields.EMPTY_BUCKETS,_Fields.LEVELS,_Fields.PAGES_EXAMINE,_Fields.PAGES_FREE,_Fields.PAGES_TRUNCATED,_Fields.END_KEY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEADLOCK, new org.apache.thrift.meta_data.FieldMetaData("deadlock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMPTY_BUCKETS, new org.apache.thrift.meta_data.FieldMetaData("emptyBuckets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVELS, new org.apache.thrift.meta_data.FieldMetaData("levels", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGES_EXAMINE, new org.apache.thrift.meta_data.FieldMetaData("pagesExamine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGES_FREE, new org.apache.thrift.meta_data.FieldMetaData("pagesFree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGES_TRUNCATED, new org.apache.thrift.meta_data.FieldMetaData("pagesTruncated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("endKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbt.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCompactResult.class, metaDataMap);
  }

  public TCompactResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCompactResult(TCompactResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.deadlock = other.deadlock;
    this.emptyBuckets = other.emptyBuckets;
    this.levels = other.levels;
    this.pagesExamine = other.pagesExamine;
    this.pagesFree = other.pagesFree;
    this.pagesTruncated = other.pagesTruncated;
    if (other.isSetEndKey()) {
      this.endKey = new TDbt(other.endKey);
    }
  }

  public TCompactResult deepCopy() {
    return new TCompactResult(this);
  }

  @Override
  public void clear() {
    setDeadlockIsSet(false);
    this.deadlock = 0;
    setEmptyBucketsIsSet(false);
    this.emptyBuckets = 0;
    setLevelsIsSet(false);
    this.levels = 0;
    setPagesExamineIsSet(false);
    this.pagesExamine = 0;
    setPagesFreeIsSet(false);
    this.pagesFree = 0;
    setPagesTruncatedIsSet(false);
    this.pagesTruncated = 0;
    this.endKey = null;
  }

  public int getDeadlock() {
    return this.deadlock;
  }

  public TCompactResult setDeadlock(int deadlock) {
    this.deadlock = deadlock;
    setDeadlockIsSet(true);
    return this;
  }

  public void unsetDeadlock() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEADLOCK_ISSET_ID);
  }

  /** Returns true if field deadlock is set (has been assigned a value) and false otherwise */
  public boolean isSetDeadlock() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEADLOCK_ISSET_ID);
  }

  public void setDeadlockIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEADLOCK_ISSET_ID, value);
  }

  public int getEmptyBuckets() {
    return this.emptyBuckets;
  }

  public TCompactResult setEmptyBuckets(int emptyBuckets) {
    this.emptyBuckets = emptyBuckets;
    setEmptyBucketsIsSet(true);
    return this;
  }

  public void unsetEmptyBuckets() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPTYBUCKETS_ISSET_ID);
  }

  /** Returns true if field emptyBuckets is set (has been assigned a value) and false otherwise */
  public boolean isSetEmptyBuckets() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPTYBUCKETS_ISSET_ID);
  }

  public void setEmptyBucketsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPTYBUCKETS_ISSET_ID, value);
  }

  public int getLevels() {
    return this.levels;
  }

  public TCompactResult setLevels(int levels) {
    this.levels = levels;
    setLevelsIsSet(true);
    return this;
  }

  public void unsetLevels() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEVELS_ISSET_ID);
  }

  /** Returns true if field levels is set (has been assigned a value) and false otherwise */
  public boolean isSetLevels() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEVELS_ISSET_ID);
  }

  public void setLevelsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEVELS_ISSET_ID, value);
  }

  public int getPagesExamine() {
    return this.pagesExamine;
  }

  public TCompactResult setPagesExamine(int pagesExamine) {
    this.pagesExamine = pagesExamine;
    setPagesExamineIsSet(true);
    return this;
  }

  public void unsetPagesExamine() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESEXAMINE_ISSET_ID);
  }

  /** Returns true if field pagesExamine is set (has been assigned a value) and false otherwise */
  public boolean isSetPagesExamine() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESEXAMINE_ISSET_ID);
  }

  public void setPagesExamineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESEXAMINE_ISSET_ID, value);
  }

  public int getPagesFree() {
    return this.pagesFree;
  }

  public TCompactResult setPagesFree(int pagesFree) {
    this.pagesFree = pagesFree;
    setPagesFreeIsSet(true);
    return this;
  }

  public void unsetPagesFree() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESFREE_ISSET_ID);
  }

  /** Returns true if field pagesFree is set (has been assigned a value) and false otherwise */
  public boolean isSetPagesFree() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESFREE_ISSET_ID);
  }

  public void setPagesFreeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESFREE_ISSET_ID, value);
  }

  public int getPagesTruncated() {
    return this.pagesTruncated;
  }

  public TCompactResult setPagesTruncated(int pagesTruncated) {
    this.pagesTruncated = pagesTruncated;
    setPagesTruncatedIsSet(true);
    return this;
  }

  public void unsetPagesTruncated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESTRUNCATED_ISSET_ID);
  }

  /** Returns true if field pagesTruncated is set (has been assigned a value) and false otherwise */
  public boolean isSetPagesTruncated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESTRUNCATED_ISSET_ID);
  }

  public void setPagesTruncatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESTRUNCATED_ISSET_ID, value);
  }

  public TDbt getEndKey() {
    return this.endKey;
  }

  public TCompactResult setEndKey(TDbt endKey) {
    this.endKey = endKey;
    return this;
  }

  public void unsetEndKey() {
    this.endKey = null;
  }

  /** Returns true if field endKey is set (has been assigned a value) and false otherwise */
  public boolean isSetEndKey() {
    return this.endKey != null;
  }

  public void setEndKeyIsSet(boolean value) {
    if (!value) {
      this.endKey = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DEADLOCK:
      if (value == null) {
        unsetDeadlock();
      } else {
        setDeadlock((java.lang.Integer)value);
      }
      break;

    case EMPTY_BUCKETS:
      if (value == null) {
        unsetEmptyBuckets();
      } else {
        setEmptyBuckets((java.lang.Integer)value);
      }
      break;

    case LEVELS:
      if (value == null) {
        unsetLevels();
      } else {
        setLevels((java.lang.Integer)value);
      }
      break;

    case PAGES_EXAMINE:
      if (value == null) {
        unsetPagesExamine();
      } else {
        setPagesExamine((java.lang.Integer)value);
      }
      break;

    case PAGES_FREE:
      if (value == null) {
        unsetPagesFree();
      } else {
        setPagesFree((java.lang.Integer)value);
      }
      break;

    case PAGES_TRUNCATED:
      if (value == null) {
        unsetPagesTruncated();
      } else {
        setPagesTruncated((java.lang.Integer)value);
      }
      break;

    case END_KEY:
      if (value == null) {
        unsetEndKey();
      } else {
        setEndKey((TDbt)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DEADLOCK:
      return getDeadlock();

    case EMPTY_BUCKETS:
      return getEmptyBuckets();

    case LEVELS:
      return getLevels();

    case PAGES_EXAMINE:
      return getPagesExamine();

    case PAGES_FREE:
      return getPagesFree();

    case PAGES_TRUNCATED:
      return getPagesTruncated();

    case END_KEY:
      return getEndKey();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DEADLOCK:
      return isSetDeadlock();
    case EMPTY_BUCKETS:
      return isSetEmptyBuckets();
    case LEVELS:
      return isSetLevels();
    case PAGES_EXAMINE:
      return isSetPagesExamine();
    case PAGES_FREE:
      return isSetPagesFree();
    case PAGES_TRUNCATED:
      return isSetPagesTruncated();
    case END_KEY:
      return isSetEndKey();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TCompactResult)
      return this.equals((TCompactResult)that);
    return false;
  }

  public boolean equals(TCompactResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_deadlock = true && this.isSetDeadlock();
    boolean that_present_deadlock = true && that.isSetDeadlock();
    if (this_present_deadlock || that_present_deadlock) {
      if (!(this_present_deadlock && that_present_deadlock))
        return false;
      if (this.deadlock != that.deadlock)
        return false;
    }

    boolean this_present_emptyBuckets = true && this.isSetEmptyBuckets();
    boolean that_present_emptyBuckets = true && that.isSetEmptyBuckets();
    if (this_present_emptyBuckets || that_present_emptyBuckets) {
      if (!(this_present_emptyBuckets && that_present_emptyBuckets))
        return false;
      if (this.emptyBuckets != that.emptyBuckets)
        return false;
    }

    boolean this_present_levels = true && this.isSetLevels();
    boolean that_present_levels = true && that.isSetLevels();
    if (this_present_levels || that_present_levels) {
      if (!(this_present_levels && that_present_levels))
        return false;
      if (this.levels != that.levels)
        return false;
    }

    boolean this_present_pagesExamine = true && this.isSetPagesExamine();
    boolean that_present_pagesExamine = true && that.isSetPagesExamine();
    if (this_present_pagesExamine || that_present_pagesExamine) {
      if (!(this_present_pagesExamine && that_present_pagesExamine))
        return false;
      if (this.pagesExamine != that.pagesExamine)
        return false;
    }

    boolean this_present_pagesFree = true && this.isSetPagesFree();
    boolean that_present_pagesFree = true && that.isSetPagesFree();
    if (this_present_pagesFree || that_present_pagesFree) {
      if (!(this_present_pagesFree && that_present_pagesFree))
        return false;
      if (this.pagesFree != that.pagesFree)
        return false;
    }

    boolean this_present_pagesTruncated = true && this.isSetPagesTruncated();
    boolean that_present_pagesTruncated = true && that.isSetPagesTruncated();
    if (this_present_pagesTruncated || that_present_pagesTruncated) {
      if (!(this_present_pagesTruncated && that_present_pagesTruncated))
        return false;
      if (this.pagesTruncated != that.pagesTruncated)
        return false;
    }

    boolean this_present_endKey = true && this.isSetEndKey();
    boolean that_present_endKey = true && that.isSetEndKey();
    if (this_present_endKey || that_present_endKey) {
      if (!(this_present_endKey && that_present_endKey))
        return false;
      if (!this.endKey.equals(that.endKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDeadlock()) ? 131071 : 524287);
    if (isSetDeadlock())
      hashCode = hashCode * 8191 + deadlock;

    hashCode = hashCode * 8191 + ((isSetEmptyBuckets()) ? 131071 : 524287);
    if (isSetEmptyBuckets())
      hashCode = hashCode * 8191 + emptyBuckets;

    hashCode = hashCode * 8191 + ((isSetLevels()) ? 131071 : 524287);
    if (isSetLevels())
      hashCode = hashCode * 8191 + levels;

    hashCode = hashCode * 8191 + ((isSetPagesExamine()) ? 131071 : 524287);
    if (isSetPagesExamine())
      hashCode = hashCode * 8191 + pagesExamine;

    hashCode = hashCode * 8191 + ((isSetPagesFree()) ? 131071 : 524287);
    if (isSetPagesFree())
      hashCode = hashCode * 8191 + pagesFree;

    hashCode = hashCode * 8191 + ((isSetPagesTruncated()) ? 131071 : 524287);
    if (isSetPagesTruncated())
      hashCode = hashCode * 8191 + pagesTruncated;

    hashCode = hashCode * 8191 + ((isSetEndKey()) ? 131071 : 524287);
    if (isSetEndKey())
      hashCode = hashCode * 8191 + endKey.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCompactResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDeadlock()).compareTo(other.isSetDeadlock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeadlock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deadlock, other.deadlock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmptyBuckets()).compareTo(other.isSetEmptyBuckets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmptyBuckets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emptyBuckets, other.emptyBuckets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLevels()).compareTo(other.isSetLevels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levels, other.levels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPagesExamine()).compareTo(other.isSetPagesExamine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagesExamine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesExamine, other.pagesExamine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPagesFree()).compareTo(other.isSetPagesFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagesFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesFree, other.pagesFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPagesTruncated()).compareTo(other.isSetPagesTruncated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagesTruncated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesTruncated, other.pagesTruncated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndKey()).compareTo(other.isSetEndKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endKey, other.endKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCompactResult(");
    boolean first = true;

    if (isSetDeadlock()) {
      sb.append("deadlock:");
      sb.append(this.deadlock);
      first = false;
    }
    if (isSetEmptyBuckets()) {
      if (!first) sb.append(", ");
      sb.append("emptyBuckets:");
      sb.append(this.emptyBuckets);
      first = false;
    }
    if (isSetLevels()) {
      if (!first) sb.append(", ");
      sb.append("levels:");
      sb.append(this.levels);
      first = false;
    }
    if (isSetPagesExamine()) {
      if (!first) sb.append(", ");
      sb.append("pagesExamine:");
      sb.append(this.pagesExamine);
      first = false;
    }
    if (isSetPagesFree()) {
      if (!first) sb.append(", ");
      sb.append("pagesFree:");
      sb.append(this.pagesFree);
      first = false;
    }
    if (isSetPagesTruncated()) {
      if (!first) sb.append(", ");
      sb.append("pagesTruncated:");
      sb.append(this.pagesTruncated);
      first = false;
    }
    if (isSetEndKey()) {
      if (!first) sb.append(", ");
      sb.append("endKey:");
      if (this.endKey == null) {
        sb.append("null");
      } else {
        sb.append(this.endKey);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (endKey != null) {
      endKey.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCompactResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCompactResultStandardScheme getScheme() {
      return new TCompactResultStandardScheme();
    }
  }

  private static class TCompactResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCompactResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCompactResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEADLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deadlock = iprot.readI32();
              struct.setDeadlockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMPTY_BUCKETS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emptyBuckets = iprot.readI32();
              struct.setEmptyBucketsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEVELS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.levels = iprot.readI32();
              struct.setLevelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGES_EXAMINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pagesExamine = iprot.readI32();
              struct.setPagesExamineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAGES_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pagesFree = iprot.readI32();
              struct.setPagesFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAGES_TRUNCATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pagesTruncated = iprot.readI32();
              struct.setPagesTruncatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.endKey = new TDbt();
              struct.endKey.read(iprot);
              struct.setEndKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCompactResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDeadlock()) {
        oprot.writeFieldBegin(DEADLOCK_FIELD_DESC);
        oprot.writeI32(struct.deadlock);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmptyBuckets()) {
        oprot.writeFieldBegin(EMPTY_BUCKETS_FIELD_DESC);
        oprot.writeI32(struct.emptyBuckets);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLevels()) {
        oprot.writeFieldBegin(LEVELS_FIELD_DESC);
        oprot.writeI32(struct.levels);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPagesExamine()) {
        oprot.writeFieldBegin(PAGES_EXAMINE_FIELD_DESC);
        oprot.writeI32(struct.pagesExamine);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPagesFree()) {
        oprot.writeFieldBegin(PAGES_FREE_FIELD_DESC);
        oprot.writeI32(struct.pagesFree);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPagesTruncated()) {
        oprot.writeFieldBegin(PAGES_TRUNCATED_FIELD_DESC);
        oprot.writeI32(struct.pagesTruncated);
        oprot.writeFieldEnd();
      }
      if (struct.endKey != null) {
        if (struct.isSetEndKey()) {
          oprot.writeFieldBegin(END_KEY_FIELD_DESC);
          struct.endKey.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCompactResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCompactResultTupleScheme getScheme() {
      return new TCompactResultTupleScheme();
    }
  }

  private static class TCompactResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCompactResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCompactResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDeadlock()) {
        optionals.set(0);
      }
      if (struct.isSetEmptyBuckets()) {
        optionals.set(1);
      }
      if (struct.isSetLevels()) {
        optionals.set(2);
      }
      if (struct.isSetPagesExamine()) {
        optionals.set(3);
      }
      if (struct.isSetPagesFree()) {
        optionals.set(4);
      }
      if (struct.isSetPagesTruncated()) {
        optionals.set(5);
      }
      if (struct.isSetEndKey()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetDeadlock()) {
        oprot.writeI32(struct.deadlock);
      }
      if (struct.isSetEmptyBuckets()) {
        oprot.writeI32(struct.emptyBuckets);
      }
      if (struct.isSetLevels()) {
        oprot.writeI32(struct.levels);
      }
      if (struct.isSetPagesExamine()) {
        oprot.writeI32(struct.pagesExamine);
      }
      if (struct.isSetPagesFree()) {
        oprot.writeI32(struct.pagesFree);
      }
      if (struct.isSetPagesTruncated()) {
        oprot.writeI32(struct.pagesTruncated);
      }
      if (struct.isSetEndKey()) {
        struct.endKey.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCompactResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.deadlock = iprot.readI32();
        struct.setDeadlockIsSet(true);
      }
      if (incoming.get(1)) {
        struct.emptyBuckets = iprot.readI32();
        struct.setEmptyBucketsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.levels = iprot.readI32();
        struct.setLevelsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pagesExamine = iprot.readI32();
        struct.setPagesExamineIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pagesFree = iprot.readI32();
        struct.setPagesFreeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pagesTruncated = iprot.readI32();
        struct.setPagesTruncatedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endKey = new TDbt();
        struct.endKey.read(iprot);
        struct.setEndKeyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

