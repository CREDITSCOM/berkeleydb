/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-25")
public class TActiveTxnStat implements org.apache.thrift.TBase<TActiveTxnStat, TActiveTxnStat._Fields>, java.io.Serializable, Cloneable, Comparable<TActiveTxnStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TActiveTxnStat");

  private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("GId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LSN_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("lsnFile", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LSN_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("lsnOffset", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MULTIVERSION_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("multiversionRef", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField READ_LSN_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("readLsnFile", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField READ_LSN_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("readLsnOffset", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TActiveTxnStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TActiveTxnStatTupleSchemeFactory();

  public java.nio.ByteBuffer GId; // required
  public int lsnFile; // required
  public int lsnOffset; // required
  public int multiversionRef; // required
  public java.lang.String name; // required
  public int parentId; // required
  public int pid; // required
  public int priority; // required
  public int readLsnFile; // required
  public int readLsnOffset; // required
  public int txnId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GID((short)1, "GId"),
    LSN_FILE((short)2, "lsnFile"),
    LSN_OFFSET((short)3, "lsnOffset"),
    MULTIVERSION_REF((short)4, "multiversionRef"),
    NAME((short)5, "name"),
    PARENT_ID((short)6, "parentId"),
    PID((short)7, "pid"),
    PRIORITY((short)8, "priority"),
    READ_LSN_FILE((short)9, "readLsnFile"),
    READ_LSN_OFFSET((short)10, "readLsnOffset"),
    TXN_ID((short)11, "txnId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GID
          return GID;
        case 2: // LSN_FILE
          return LSN_FILE;
        case 3: // LSN_OFFSET
          return LSN_OFFSET;
        case 4: // MULTIVERSION_REF
          return MULTIVERSION_REF;
        case 5: // NAME
          return NAME;
        case 6: // PARENT_ID
          return PARENT_ID;
        case 7: // PID
          return PID;
        case 8: // PRIORITY
          return PRIORITY;
        case 9: // READ_LSN_FILE
          return READ_LSN_FILE;
        case 10: // READ_LSN_OFFSET
          return READ_LSN_OFFSET;
        case 11: // TXN_ID
          return TXN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LSNFILE_ISSET_ID = 0;
  private static final int __LSNOFFSET_ISSET_ID = 1;
  private static final int __MULTIVERSIONREF_ISSET_ID = 2;
  private static final int __PARENTID_ISSET_ID = 3;
  private static final int __PID_ISSET_ID = 4;
  private static final int __PRIORITY_ISSET_ID = 5;
  private static final int __READLSNFILE_ISSET_ID = 6;
  private static final int __READLSNOFFSET_ISSET_ID = 7;
  private static final int __TXNID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("GId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.LSN_FILE, new org.apache.thrift.meta_data.FieldMetaData("lsnFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LSN_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("lsnOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTIVERSION_REF, new org.apache.thrift.meta_data.FieldMetaData("multiversionRef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_LSN_FILE, new org.apache.thrift.meta_data.FieldMetaData("readLsnFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_LSN_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("readLsnOffset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TActiveTxnStat.class, metaDataMap);
  }

  public TActiveTxnStat() {
  }

  public TActiveTxnStat(
    java.nio.ByteBuffer GId,
    int lsnFile,
    int lsnOffset,
    int multiversionRef,
    java.lang.String name,
    int parentId,
    int pid,
    int priority,
    int readLsnFile,
    int readLsnOffset,
    int txnId)
  {
    this();
    this.GId = org.apache.thrift.TBaseHelper.copyBinary(GId);
    this.lsnFile = lsnFile;
    setLsnFileIsSet(true);
    this.lsnOffset = lsnOffset;
    setLsnOffsetIsSet(true);
    this.multiversionRef = multiversionRef;
    setMultiversionRefIsSet(true);
    this.name = name;
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.priority = priority;
    setPriorityIsSet(true);
    this.readLsnFile = readLsnFile;
    setReadLsnFileIsSet(true);
    this.readLsnOffset = readLsnOffset;
    setReadLsnOffsetIsSet(true);
    this.txnId = txnId;
    setTxnIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TActiveTxnStat(TActiveTxnStat other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGId()) {
      this.GId = org.apache.thrift.TBaseHelper.copyBinary(other.GId);
    }
    this.lsnFile = other.lsnFile;
    this.lsnOffset = other.lsnOffset;
    this.multiversionRef = other.multiversionRef;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.parentId = other.parentId;
    this.pid = other.pid;
    this.priority = other.priority;
    this.readLsnFile = other.readLsnFile;
    this.readLsnOffset = other.readLsnOffset;
    this.txnId = other.txnId;
  }

  public TActiveTxnStat deepCopy() {
    return new TActiveTxnStat(this);
  }

  @Override
  public void clear() {
    this.GId = null;
    setLsnFileIsSet(false);
    this.lsnFile = 0;
    setLsnOffsetIsSet(false);
    this.lsnOffset = 0;
    setMultiversionRefIsSet(false);
    this.multiversionRef = 0;
    this.name = null;
    setParentIdIsSet(false);
    this.parentId = 0;
    setPidIsSet(false);
    this.pid = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    setReadLsnFileIsSet(false);
    this.readLsnFile = 0;
    setReadLsnOffsetIsSet(false);
    this.readLsnOffset = 0;
    setTxnIdIsSet(false);
    this.txnId = 0;
  }

  public byte[] getGId() {
    setGId(org.apache.thrift.TBaseHelper.rightSize(GId));
    return GId == null ? null : GId.array();
  }

  public java.nio.ByteBuffer bufferForGId() {
    return org.apache.thrift.TBaseHelper.copyBinary(GId);
  }

  public TActiveTxnStat setGId(byte[] GId) {
    this.GId = GId == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(GId.clone());
    return this;
  }

  public TActiveTxnStat setGId(java.nio.ByteBuffer GId) {
    this.GId = org.apache.thrift.TBaseHelper.copyBinary(GId);
    return this;
  }

  public void unsetGId() {
    this.GId = null;
  }

  /** Returns true if field GId is set (has been assigned a value) and false otherwise */
  public boolean isSetGId() {
    return this.GId != null;
  }

  public void setGIdIsSet(boolean value) {
    if (!value) {
      this.GId = null;
    }
  }

  public int getLsnFile() {
    return this.lsnFile;
  }

  public TActiveTxnStat setLsnFile(int lsnFile) {
    this.lsnFile = lsnFile;
    setLsnFileIsSet(true);
    return this;
  }

  public void unsetLsnFile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LSNFILE_ISSET_ID);
  }

  /** Returns true if field lsnFile is set (has been assigned a value) and false otherwise */
  public boolean isSetLsnFile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LSNFILE_ISSET_ID);
  }

  public void setLsnFileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LSNFILE_ISSET_ID, value);
  }

  public int getLsnOffset() {
    return this.lsnOffset;
  }

  public TActiveTxnStat setLsnOffset(int lsnOffset) {
    this.lsnOffset = lsnOffset;
    setLsnOffsetIsSet(true);
    return this;
  }

  public void unsetLsnOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LSNOFFSET_ISSET_ID);
  }

  /** Returns true if field lsnOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetLsnOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LSNOFFSET_ISSET_ID);
  }

  public void setLsnOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LSNOFFSET_ISSET_ID, value);
  }

  public int getMultiversionRef() {
    return this.multiversionRef;
  }

  public TActiveTxnStat setMultiversionRef(int multiversionRef) {
    this.multiversionRef = multiversionRef;
    setMultiversionRefIsSet(true);
    return this;
  }

  public void unsetMultiversionRef() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MULTIVERSIONREF_ISSET_ID);
  }

  /** Returns true if field multiversionRef is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiversionRef() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MULTIVERSIONREF_ISSET_ID);
  }

  public void setMultiversionRefIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MULTIVERSIONREF_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public TActiveTxnStat setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getParentId() {
    return this.parentId;
  }

  public TActiveTxnStat setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public TActiveTxnStat setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public TActiveTxnStat setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public int getReadLsnFile() {
    return this.readLsnFile;
  }

  public TActiveTxnStat setReadLsnFile(int readLsnFile) {
    this.readLsnFile = readLsnFile;
    setReadLsnFileIsSet(true);
    return this;
  }

  public void unsetReadLsnFile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READLSNFILE_ISSET_ID);
  }

  /** Returns true if field readLsnFile is set (has been assigned a value) and false otherwise */
  public boolean isSetReadLsnFile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READLSNFILE_ISSET_ID);
  }

  public void setReadLsnFileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READLSNFILE_ISSET_ID, value);
  }

  public int getReadLsnOffset() {
    return this.readLsnOffset;
  }

  public TActiveTxnStat setReadLsnOffset(int readLsnOffset) {
    this.readLsnOffset = readLsnOffset;
    setReadLsnOffsetIsSet(true);
    return this;
  }

  public void unsetReadLsnOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READLSNOFFSET_ISSET_ID);
  }

  /** Returns true if field readLsnOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetReadLsnOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READLSNOFFSET_ISSET_ID);
  }

  public void setReadLsnOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READLSNOFFSET_ISSET_ID, value);
  }

  public int getTxnId() {
    return this.txnId;
  }

  public TActiveTxnStat setTxnId(int txnId) {
    this.txnId = txnId;
    setTxnIdIsSet(true);
    return this;
  }

  public void unsetTxnId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  public void setTxnIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case GID:
      if (value == null) {
        unsetGId();
      } else {
        if (value instanceof byte[]) {
          setGId((byte[])value);
        } else {
          setGId((java.nio.ByteBuffer)value);
        }
      }
      break;

    case LSN_FILE:
      if (value == null) {
        unsetLsnFile();
      } else {
        setLsnFile((java.lang.Integer)value);
      }
      break;

    case LSN_OFFSET:
      if (value == null) {
        unsetLsnOffset();
      } else {
        setLsnOffset((java.lang.Integer)value);
      }
      break;

    case MULTIVERSION_REF:
      if (value == null) {
        unsetMultiversionRef();
      } else {
        setMultiversionRef((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((java.lang.Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((java.lang.Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((java.lang.Integer)value);
      }
      break;

    case READ_LSN_FILE:
      if (value == null) {
        unsetReadLsnFile();
      } else {
        setReadLsnFile((java.lang.Integer)value);
      }
      break;

    case READ_LSN_OFFSET:
      if (value == null) {
        unsetReadLsnOffset();
      } else {
        setReadLsnOffset((java.lang.Integer)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxnId();
      } else {
        setTxnId((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GID:
      return getGId();

    case LSN_FILE:
      return getLsnFile();

    case LSN_OFFSET:
      return getLsnOffset();

    case MULTIVERSION_REF:
      return getMultiversionRef();

    case NAME:
      return getName();

    case PARENT_ID:
      return getParentId();

    case PID:
      return getPid();

    case PRIORITY:
      return getPriority();

    case READ_LSN_FILE:
      return getReadLsnFile();

    case READ_LSN_OFFSET:
      return getReadLsnOffset();

    case TXN_ID:
      return getTxnId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GID:
      return isSetGId();
    case LSN_FILE:
      return isSetLsnFile();
    case LSN_OFFSET:
      return isSetLsnOffset();
    case MULTIVERSION_REF:
      return isSetMultiversionRef();
    case NAME:
      return isSetName();
    case PARENT_ID:
      return isSetParentId();
    case PID:
      return isSetPid();
    case PRIORITY:
      return isSetPriority();
    case READ_LSN_FILE:
      return isSetReadLsnFile();
    case READ_LSN_OFFSET:
      return isSetReadLsnOffset();
    case TXN_ID:
      return isSetTxnId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TActiveTxnStat)
      return this.equals((TActiveTxnStat)that);
    return false;
  }

  public boolean equals(TActiveTxnStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_GId = true && this.isSetGId();
    boolean that_present_GId = true && that.isSetGId();
    if (this_present_GId || that_present_GId) {
      if (!(this_present_GId && that_present_GId))
        return false;
      if (!this.GId.equals(that.GId))
        return false;
    }

    boolean this_present_lsnFile = true;
    boolean that_present_lsnFile = true;
    if (this_present_lsnFile || that_present_lsnFile) {
      if (!(this_present_lsnFile && that_present_lsnFile))
        return false;
      if (this.lsnFile != that.lsnFile)
        return false;
    }

    boolean this_present_lsnOffset = true;
    boolean that_present_lsnOffset = true;
    if (this_present_lsnOffset || that_present_lsnOffset) {
      if (!(this_present_lsnOffset && that_present_lsnOffset))
        return false;
      if (this.lsnOffset != that.lsnOffset)
        return false;
    }

    boolean this_present_multiversionRef = true;
    boolean that_present_multiversionRef = true;
    if (this_present_multiversionRef || that_present_multiversionRef) {
      if (!(this_present_multiversionRef && that_present_multiversionRef))
        return false;
      if (this.multiversionRef != that.multiversionRef)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_readLsnFile = true;
    boolean that_present_readLsnFile = true;
    if (this_present_readLsnFile || that_present_readLsnFile) {
      if (!(this_present_readLsnFile && that_present_readLsnFile))
        return false;
      if (this.readLsnFile != that.readLsnFile)
        return false;
    }

    boolean this_present_readLsnOffset = true;
    boolean that_present_readLsnOffset = true;
    if (this_present_readLsnOffset || that_present_readLsnOffset) {
      if (!(this_present_readLsnOffset && that_present_readLsnOffset))
        return false;
      if (this.readLsnOffset != that.readLsnOffset)
        return false;
    }

    boolean this_present_txnId = true;
    boolean that_present_txnId = true;
    if (this_present_txnId || that_present_txnId) {
      if (!(this_present_txnId && that_present_txnId))
        return false;
      if (this.txnId != that.txnId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGId()) ? 131071 : 524287);
    if (isSetGId())
      hashCode = hashCode * 8191 + GId.hashCode();

    hashCode = hashCode * 8191 + lsnFile;

    hashCode = hashCode * 8191 + lsnOffset;

    hashCode = hashCode * 8191 + multiversionRef;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + parentId;

    hashCode = hashCode * 8191 + pid;

    hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + readLsnFile;

    hashCode = hashCode * 8191 + readLsnOffset;

    hashCode = hashCode * 8191 + txnId;

    return hashCode;
  }

  @Override
  public int compareTo(TActiveTxnStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGId()).compareTo(other.isSetGId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GId, other.GId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLsnFile()).compareTo(other.isSetLsnFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLsnFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lsnFile, other.lsnFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLsnOffset()).compareTo(other.isSetLsnOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLsnOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lsnOffset, other.lsnOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMultiversionRef()).compareTo(other.isSetMultiversionRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiversionRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiversionRef, other.multiversionRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadLsnFile()).compareTo(other.isSetReadLsnFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadLsnFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readLsnFile, other.readLsnFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadLsnOffset()).compareTo(other.isSetReadLsnOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadLsnOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readLsnOffset, other.readLsnOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TActiveTxnStat(");
    boolean first = true;

    sb.append("GId:");
    if (this.GId == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.GId, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lsnFile:");
    sb.append(this.lsnFile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lsnOffset:");
    sb.append(this.lsnOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiversionRef:");
    sb.append(this.multiversionRef);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readLsnFile:");
    sb.append(this.readLsnFile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readLsnOffset:");
    sb.append(this.readLsnOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txnId:");
    sb.append(this.txnId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TActiveTxnStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TActiveTxnStatStandardScheme getScheme() {
      return new TActiveTxnStatStandardScheme();
    }
  }

  private static class TActiveTxnStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<TActiveTxnStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TActiveTxnStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.GId = iprot.readBinary();
              struct.setGIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LSN_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lsnFile = iprot.readI32();
              struct.setLsnFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LSN_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lsnOffset = iprot.readI32();
              struct.setLsnOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MULTIVERSION_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiversionRef = iprot.readI32();
              struct.setMultiversionRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // READ_LSN_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readLsnFile = iprot.readI32();
              struct.setReadLsnFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // READ_LSN_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readLsnOffset = iprot.readI32();
              struct.setReadLsnOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.txnId = iprot.readI32();
              struct.setTxnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TActiveTxnStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.GId != null) {
        oprot.writeFieldBegin(GID_FIELD_DESC);
        oprot.writeBinary(struct.GId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LSN_FILE_FIELD_DESC);
      oprot.writeI32(struct.lsnFile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LSN_OFFSET_FIELD_DESC);
      oprot.writeI32(struct.lsnOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MULTIVERSION_REF_FIELD_DESC);
      oprot.writeI32(struct.multiversionRef);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_LSN_FILE_FIELD_DESC);
      oprot.writeI32(struct.readLsnFile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_LSN_OFFSET_FIELD_DESC);
      oprot.writeI32(struct.readLsnOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
      oprot.writeI32(struct.txnId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TActiveTxnStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TActiveTxnStatTupleScheme getScheme() {
      return new TActiveTxnStatTupleScheme();
    }
  }

  private static class TActiveTxnStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<TActiveTxnStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TActiveTxnStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGId()) {
        optionals.set(0);
      }
      if (struct.isSetLsnFile()) {
        optionals.set(1);
      }
      if (struct.isSetLsnOffset()) {
        optionals.set(2);
      }
      if (struct.isSetMultiversionRef()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetParentId()) {
        optionals.set(5);
      }
      if (struct.isSetPid()) {
        optionals.set(6);
      }
      if (struct.isSetPriority()) {
        optionals.set(7);
      }
      if (struct.isSetReadLsnFile()) {
        optionals.set(8);
      }
      if (struct.isSetReadLsnOffset()) {
        optionals.set(9);
      }
      if (struct.isSetTxnId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetGId()) {
        oprot.writeBinary(struct.GId);
      }
      if (struct.isSetLsnFile()) {
        oprot.writeI32(struct.lsnFile);
      }
      if (struct.isSetLsnOffset()) {
        oprot.writeI32(struct.lsnOffset);
      }
      if (struct.isSetMultiversionRef()) {
        oprot.writeI32(struct.multiversionRef);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetReadLsnFile()) {
        oprot.writeI32(struct.readLsnFile);
      }
      if (struct.isSetReadLsnOffset()) {
        oprot.writeI32(struct.readLsnOffset);
      }
      if (struct.isSetTxnId()) {
        oprot.writeI32(struct.txnId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TActiveTxnStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.GId = iprot.readBinary();
        struct.setGIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lsnFile = iprot.readI32();
        struct.setLsnFileIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lsnOffset = iprot.readI32();
        struct.setLsnOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.multiversionRef = iprot.readI32();
        struct.setMultiversionRefIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.readLsnFile = iprot.readI32();
        struct.setReadLsnFileIsSet(true);
      }
      if (incoming.get(9)) {
        struct.readLsnOffset = iprot.readI32();
        struct.setReadLsnOffsetIsSet(true);
      }
      if (incoming.get(10)) {
        struct.txnId = iprot.readI32();
        struct.setTxnIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

