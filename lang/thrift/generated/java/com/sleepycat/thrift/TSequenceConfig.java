/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sleepycat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-25")
public class TSequenceConfig implements org.apache.thrift.TBase<TSequenceConfig, TSequenceConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TSequenceConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSequenceConfig");

  private static final org.apache.thrift.protocol.TField ALLOW_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("allowCreate", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField AUTO_COMMIT_NO_SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("autoCommitNoSync", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CACHE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DECREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("decrement", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField EXCLUSIVE_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exclusiveCreate", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField INITIAL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("initialValue", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MINIMUM_FIELD_DESC = new org.apache.thrift.protocol.TField("minimum", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField MAXIMUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maximum", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField WRAP_FIELD_DESC = new org.apache.thrift.protocol.TField("wrap", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSequenceConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSequenceConfigTupleSchemeFactory();

  public boolean allowCreate; // optional
  public boolean autoCommitNoSync; // optional
  public int cacheSize; // optional
  public boolean decrement; // optional
  public boolean exclusiveCreate; // optional
  public long initialValue; // optional
  public long minimum; // optional
  public long maximum; // optional
  public boolean wrap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALLOW_CREATE((short)1, "allowCreate"),
    AUTO_COMMIT_NO_SYNC((short)2, "autoCommitNoSync"),
    CACHE_SIZE((short)3, "cacheSize"),
    DECREMENT((short)4, "decrement"),
    EXCLUSIVE_CREATE((short)5, "exclusiveCreate"),
    INITIAL_VALUE((short)6, "initialValue"),
    MINIMUM((short)7, "minimum"),
    MAXIMUM((short)8, "maximum"),
    WRAP((short)9, "wrap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALLOW_CREATE
          return ALLOW_CREATE;
        case 2: // AUTO_COMMIT_NO_SYNC
          return AUTO_COMMIT_NO_SYNC;
        case 3: // CACHE_SIZE
          return CACHE_SIZE;
        case 4: // DECREMENT
          return DECREMENT;
        case 5: // EXCLUSIVE_CREATE
          return EXCLUSIVE_CREATE;
        case 6: // INITIAL_VALUE
          return INITIAL_VALUE;
        case 7: // MINIMUM
          return MINIMUM;
        case 8: // MAXIMUM
          return MAXIMUM;
        case 9: // WRAP
          return WRAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALLOWCREATE_ISSET_ID = 0;
  private static final int __AUTOCOMMITNOSYNC_ISSET_ID = 1;
  private static final int __CACHESIZE_ISSET_ID = 2;
  private static final int __DECREMENT_ISSET_ID = 3;
  private static final int __EXCLUSIVECREATE_ISSET_ID = 4;
  private static final int __INITIALVALUE_ISSET_ID = 5;
  private static final int __MINIMUM_ISSET_ID = 6;
  private static final int __MAXIMUM_ISSET_ID = 7;
  private static final int __WRAP_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ALLOW_CREATE,_Fields.AUTO_COMMIT_NO_SYNC,_Fields.CACHE_SIZE,_Fields.DECREMENT,_Fields.EXCLUSIVE_CREATE,_Fields.INITIAL_VALUE,_Fields.MINIMUM,_Fields.MAXIMUM,_Fields.WRAP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALLOW_CREATE, new org.apache.thrift.meta_data.FieldMetaData("allowCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AUTO_COMMIT_NO_SYNC, new org.apache.thrift.meta_data.FieldMetaData("autoCommitNoSync", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CACHE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cacheSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DECREMENT, new org.apache.thrift.meta_data.FieldMetaData("decrement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXCLUSIVE_CREATE, new org.apache.thrift.meta_data.FieldMetaData("exclusiveCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INITIAL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("initialValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MINIMUM, new org.apache.thrift.meta_data.FieldMetaData("minimum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAXIMUM, new org.apache.thrift.meta_data.FieldMetaData("maximum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WRAP, new org.apache.thrift.meta_data.FieldMetaData("wrap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSequenceConfig.class, metaDataMap);
  }

  public TSequenceConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSequenceConfig(TSequenceConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.allowCreate = other.allowCreate;
    this.autoCommitNoSync = other.autoCommitNoSync;
    this.cacheSize = other.cacheSize;
    this.decrement = other.decrement;
    this.exclusiveCreate = other.exclusiveCreate;
    this.initialValue = other.initialValue;
    this.minimum = other.minimum;
    this.maximum = other.maximum;
    this.wrap = other.wrap;
  }

  public TSequenceConfig deepCopy() {
    return new TSequenceConfig(this);
  }

  @Override
  public void clear() {
    setAllowCreateIsSet(false);
    this.allowCreate = false;
    setAutoCommitNoSyncIsSet(false);
    this.autoCommitNoSync = false;
    setCacheSizeIsSet(false);
    this.cacheSize = 0;
    setDecrementIsSet(false);
    this.decrement = false;
    setExclusiveCreateIsSet(false);
    this.exclusiveCreate = false;
    setInitialValueIsSet(false);
    this.initialValue = 0;
    setMinimumIsSet(false);
    this.minimum = 0;
    setMaximumIsSet(false);
    this.maximum = 0;
    setWrapIsSet(false);
    this.wrap = false;
  }

  public boolean isAllowCreate() {
    return this.allowCreate;
  }

  public TSequenceConfig setAllowCreate(boolean allowCreate) {
    this.allowCreate = allowCreate;
    setAllowCreateIsSet(true);
    return this;
  }

  public void unsetAllowCreate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID);
  }

  /** Returns true if field allowCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowCreate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID);
  }

  public void setAllowCreateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOWCREATE_ISSET_ID, value);
  }

  public boolean isAutoCommitNoSync() {
    return this.autoCommitNoSync;
  }

  public TSequenceConfig setAutoCommitNoSync(boolean autoCommitNoSync) {
    this.autoCommitNoSync = autoCommitNoSync;
    setAutoCommitNoSyncIsSet(true);
    return this;
  }

  public void unsetAutoCommitNoSync() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOCOMMITNOSYNC_ISSET_ID);
  }

  /** Returns true if field autoCommitNoSync is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoCommitNoSync() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOCOMMITNOSYNC_ISSET_ID);
  }

  public void setAutoCommitNoSyncIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOCOMMITNOSYNC_ISSET_ID, value);
  }

  public int getCacheSize() {
    return this.cacheSize;
  }

  public TSequenceConfig setCacheSize(int cacheSize) {
    this.cacheSize = cacheSize;
    setCacheSizeIsSet(true);
    return this;
  }

  public void unsetCacheSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHESIZE_ISSET_ID);
  }

  /** Returns true if field cacheSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHESIZE_ISSET_ID);
  }

  public void setCacheSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHESIZE_ISSET_ID, value);
  }

  public boolean isDecrement() {
    return this.decrement;
  }

  public TSequenceConfig setDecrement(boolean decrement) {
    this.decrement = decrement;
    setDecrementIsSet(true);
    return this;
  }

  public void unsetDecrement() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DECREMENT_ISSET_ID);
  }

  /** Returns true if field decrement is set (has been assigned a value) and false otherwise */
  public boolean isSetDecrement() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DECREMENT_ISSET_ID);
  }

  public void setDecrementIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DECREMENT_ISSET_ID, value);
  }

  public boolean isExclusiveCreate() {
    return this.exclusiveCreate;
  }

  public TSequenceConfig setExclusiveCreate(boolean exclusiveCreate) {
    this.exclusiveCreate = exclusiveCreate;
    setExclusiveCreateIsSet(true);
    return this;
  }

  public void unsetExclusiveCreate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCLUSIVECREATE_ISSET_ID);
  }

  /** Returns true if field exclusiveCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetExclusiveCreate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCLUSIVECREATE_ISSET_ID);
  }

  public void setExclusiveCreateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCLUSIVECREATE_ISSET_ID, value);
  }

  public long getInitialValue() {
    return this.initialValue;
  }

  public TSequenceConfig setInitialValue(long initialValue) {
    this.initialValue = initialValue;
    setInitialValueIsSet(true);
    return this;
  }

  public void unsetInitialValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INITIALVALUE_ISSET_ID);
  }

  /** Returns true if field initialValue is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INITIALVALUE_ISSET_ID);
  }

  public void setInitialValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INITIALVALUE_ISSET_ID, value);
  }

  public long getMinimum() {
    return this.minimum;
  }

  public TSequenceConfig setMinimum(long minimum) {
    this.minimum = minimum;
    setMinimumIsSet(true);
    return this;
  }

  public void unsetMinimum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINIMUM_ISSET_ID);
  }

  /** Returns true if field minimum is set (has been assigned a value) and false otherwise */
  public boolean isSetMinimum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINIMUM_ISSET_ID);
  }

  public void setMinimumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINIMUM_ISSET_ID, value);
  }

  public long getMaximum() {
    return this.maximum;
  }

  public TSequenceConfig setMaximum(long maximum) {
    this.maximum = maximum;
    setMaximumIsSet(true);
    return this;
  }

  public void unsetMaximum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXIMUM_ISSET_ID);
  }

  /** Returns true if field maximum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaximum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXIMUM_ISSET_ID);
  }

  public void setMaximumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXIMUM_ISSET_ID, value);
  }

  public boolean isWrap() {
    return this.wrap;
  }

  public TSequenceConfig setWrap(boolean wrap) {
    this.wrap = wrap;
    setWrapIsSet(true);
    return this;
  }

  public void unsetWrap() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRAP_ISSET_ID);
  }

  /** Returns true if field wrap is set (has been assigned a value) and false otherwise */
  public boolean isSetWrap() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRAP_ISSET_ID);
  }

  public void setWrapIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRAP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ALLOW_CREATE:
      if (value == null) {
        unsetAllowCreate();
      } else {
        setAllowCreate((java.lang.Boolean)value);
      }
      break;

    case AUTO_COMMIT_NO_SYNC:
      if (value == null) {
        unsetAutoCommitNoSync();
      } else {
        setAutoCommitNoSync((java.lang.Boolean)value);
      }
      break;

    case CACHE_SIZE:
      if (value == null) {
        unsetCacheSize();
      } else {
        setCacheSize((java.lang.Integer)value);
      }
      break;

    case DECREMENT:
      if (value == null) {
        unsetDecrement();
      } else {
        setDecrement((java.lang.Boolean)value);
      }
      break;

    case EXCLUSIVE_CREATE:
      if (value == null) {
        unsetExclusiveCreate();
      } else {
        setExclusiveCreate((java.lang.Boolean)value);
      }
      break;

    case INITIAL_VALUE:
      if (value == null) {
        unsetInitialValue();
      } else {
        setInitialValue((java.lang.Long)value);
      }
      break;

    case MINIMUM:
      if (value == null) {
        unsetMinimum();
      } else {
        setMinimum((java.lang.Long)value);
      }
      break;

    case MAXIMUM:
      if (value == null) {
        unsetMaximum();
      } else {
        setMaximum((java.lang.Long)value);
      }
      break;

    case WRAP:
      if (value == null) {
        unsetWrap();
      } else {
        setWrap((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ALLOW_CREATE:
      return isAllowCreate();

    case AUTO_COMMIT_NO_SYNC:
      return isAutoCommitNoSync();

    case CACHE_SIZE:
      return getCacheSize();

    case DECREMENT:
      return isDecrement();

    case EXCLUSIVE_CREATE:
      return isExclusiveCreate();

    case INITIAL_VALUE:
      return getInitialValue();

    case MINIMUM:
      return getMinimum();

    case MAXIMUM:
      return getMaximum();

    case WRAP:
      return isWrap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ALLOW_CREATE:
      return isSetAllowCreate();
    case AUTO_COMMIT_NO_SYNC:
      return isSetAutoCommitNoSync();
    case CACHE_SIZE:
      return isSetCacheSize();
    case DECREMENT:
      return isSetDecrement();
    case EXCLUSIVE_CREATE:
      return isSetExclusiveCreate();
    case INITIAL_VALUE:
      return isSetInitialValue();
    case MINIMUM:
      return isSetMinimum();
    case MAXIMUM:
      return isSetMaximum();
    case WRAP:
      return isSetWrap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TSequenceConfig)
      return this.equals((TSequenceConfig)that);
    return false;
  }

  public boolean equals(TSequenceConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_allowCreate = true && this.isSetAllowCreate();
    boolean that_present_allowCreate = true && that.isSetAllowCreate();
    if (this_present_allowCreate || that_present_allowCreate) {
      if (!(this_present_allowCreate && that_present_allowCreate))
        return false;
      if (this.allowCreate != that.allowCreate)
        return false;
    }

    boolean this_present_autoCommitNoSync = true && this.isSetAutoCommitNoSync();
    boolean that_present_autoCommitNoSync = true && that.isSetAutoCommitNoSync();
    if (this_present_autoCommitNoSync || that_present_autoCommitNoSync) {
      if (!(this_present_autoCommitNoSync && that_present_autoCommitNoSync))
        return false;
      if (this.autoCommitNoSync != that.autoCommitNoSync)
        return false;
    }

    boolean this_present_cacheSize = true && this.isSetCacheSize();
    boolean that_present_cacheSize = true && that.isSetCacheSize();
    if (this_present_cacheSize || that_present_cacheSize) {
      if (!(this_present_cacheSize && that_present_cacheSize))
        return false;
      if (this.cacheSize != that.cacheSize)
        return false;
    }

    boolean this_present_decrement = true && this.isSetDecrement();
    boolean that_present_decrement = true && that.isSetDecrement();
    if (this_present_decrement || that_present_decrement) {
      if (!(this_present_decrement && that_present_decrement))
        return false;
      if (this.decrement != that.decrement)
        return false;
    }

    boolean this_present_exclusiveCreate = true && this.isSetExclusiveCreate();
    boolean that_present_exclusiveCreate = true && that.isSetExclusiveCreate();
    if (this_present_exclusiveCreate || that_present_exclusiveCreate) {
      if (!(this_present_exclusiveCreate && that_present_exclusiveCreate))
        return false;
      if (this.exclusiveCreate != that.exclusiveCreate)
        return false;
    }

    boolean this_present_initialValue = true && this.isSetInitialValue();
    boolean that_present_initialValue = true && that.isSetInitialValue();
    if (this_present_initialValue || that_present_initialValue) {
      if (!(this_present_initialValue && that_present_initialValue))
        return false;
      if (this.initialValue != that.initialValue)
        return false;
    }

    boolean this_present_minimum = true && this.isSetMinimum();
    boolean that_present_minimum = true && that.isSetMinimum();
    if (this_present_minimum || that_present_minimum) {
      if (!(this_present_minimum && that_present_minimum))
        return false;
      if (this.minimum != that.minimum)
        return false;
    }

    boolean this_present_maximum = true && this.isSetMaximum();
    boolean that_present_maximum = true && that.isSetMaximum();
    if (this_present_maximum || that_present_maximum) {
      if (!(this_present_maximum && that_present_maximum))
        return false;
      if (this.maximum != that.maximum)
        return false;
    }

    boolean this_present_wrap = true && this.isSetWrap();
    boolean that_present_wrap = true && that.isSetWrap();
    if (this_present_wrap || that_present_wrap) {
      if (!(this_present_wrap && that_present_wrap))
        return false;
      if (this.wrap != that.wrap)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAllowCreate()) ? 131071 : 524287);
    if (isSetAllowCreate())
      hashCode = hashCode * 8191 + ((allowCreate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAutoCommitNoSync()) ? 131071 : 524287);
    if (isSetAutoCommitNoSync())
      hashCode = hashCode * 8191 + ((autoCommitNoSync) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCacheSize()) ? 131071 : 524287);
    if (isSetCacheSize())
      hashCode = hashCode * 8191 + cacheSize;

    hashCode = hashCode * 8191 + ((isSetDecrement()) ? 131071 : 524287);
    if (isSetDecrement())
      hashCode = hashCode * 8191 + ((decrement) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetExclusiveCreate()) ? 131071 : 524287);
    if (isSetExclusiveCreate())
      hashCode = hashCode * 8191 + ((exclusiveCreate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetInitialValue()) ? 131071 : 524287);
    if (isSetInitialValue())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(initialValue);

    hashCode = hashCode * 8191 + ((isSetMinimum()) ? 131071 : 524287);
    if (isSetMinimum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minimum);

    hashCode = hashCode * 8191 + ((isSetMaximum()) ? 131071 : 524287);
    if (isSetMaximum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maximum);

    hashCode = hashCode * 8191 + ((isSetWrap()) ? 131071 : 524287);
    if (isSetWrap())
      hashCode = hashCode * 8191 + ((wrap) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSequenceConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAllowCreate()).compareTo(other.isSetAllowCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowCreate, other.allowCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAutoCommitNoSync()).compareTo(other.isSetAutoCommitNoSync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoCommitNoSync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoCommitNoSync, other.autoCommitNoSync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheSize()).compareTo(other.isSetCacheSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheSize, other.cacheSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDecrement()).compareTo(other.isSetDecrement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecrement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decrement, other.decrement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExclusiveCreate()).compareTo(other.isSetExclusiveCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExclusiveCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exclusiveCreate, other.exclusiveCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInitialValue()).compareTo(other.isSetInitialValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialValue, other.initialValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinimum()).compareTo(other.isSetMinimum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinimum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minimum, other.minimum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaximum()).compareTo(other.isSetMaximum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaximum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maximum, other.maximum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWrap()).compareTo(other.isSetWrap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrap, other.wrap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSequenceConfig(");
    boolean first = true;

    if (isSetAllowCreate()) {
      sb.append("allowCreate:");
      sb.append(this.allowCreate);
      first = false;
    }
    if (isSetAutoCommitNoSync()) {
      if (!first) sb.append(", ");
      sb.append("autoCommitNoSync:");
      sb.append(this.autoCommitNoSync);
      first = false;
    }
    if (isSetCacheSize()) {
      if (!first) sb.append(", ");
      sb.append("cacheSize:");
      sb.append(this.cacheSize);
      first = false;
    }
    if (isSetDecrement()) {
      if (!first) sb.append(", ");
      sb.append("decrement:");
      sb.append(this.decrement);
      first = false;
    }
    if (isSetExclusiveCreate()) {
      if (!first) sb.append(", ");
      sb.append("exclusiveCreate:");
      sb.append(this.exclusiveCreate);
      first = false;
    }
    if (isSetInitialValue()) {
      if (!first) sb.append(", ");
      sb.append("initialValue:");
      sb.append(this.initialValue);
      first = false;
    }
    if (isSetMinimum()) {
      if (!first) sb.append(", ");
      sb.append("minimum:");
      sb.append(this.minimum);
      first = false;
    }
    if (isSetMaximum()) {
      if (!first) sb.append(", ");
      sb.append("maximum:");
      sb.append(this.maximum);
      first = false;
    }
    if (isSetWrap()) {
      if (!first) sb.append(", ");
      sb.append("wrap:");
      sb.append(this.wrap);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSequenceConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSequenceConfigStandardScheme getScheme() {
      return new TSequenceConfigStandardScheme();
    }
  }

  private static class TSequenceConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSequenceConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSequenceConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALLOW_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowCreate = iprot.readBool();
              struct.setAllowCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTO_COMMIT_NO_SYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autoCommitNoSync = iprot.readBool();
              struct.setAutoCommitNoSyncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CACHE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cacheSize = iprot.readI32();
              struct.setCacheSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DECREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.decrement = iprot.readBool();
              struct.setDecrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCLUSIVE_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.exclusiveCreate = iprot.readBool();
              struct.setExclusiveCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INITIAL_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.initialValue = iprot.readI64();
              struct.setInitialValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MINIMUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minimum = iprot.readI64();
              struct.setMinimumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAXIMUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maximum = iprot.readI64();
              struct.setMaximumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WRAP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wrap = iprot.readBool();
              struct.setWrapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSequenceConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAllowCreate()) {
        oprot.writeFieldBegin(ALLOW_CREATE_FIELD_DESC);
        oprot.writeBool(struct.allowCreate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAutoCommitNoSync()) {
        oprot.writeFieldBegin(AUTO_COMMIT_NO_SYNC_FIELD_DESC);
        oprot.writeBool(struct.autoCommitNoSync);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCacheSize()) {
        oprot.writeFieldBegin(CACHE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.cacheSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDecrement()) {
        oprot.writeFieldBegin(DECREMENT_FIELD_DESC);
        oprot.writeBool(struct.decrement);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExclusiveCreate()) {
        oprot.writeFieldBegin(EXCLUSIVE_CREATE_FIELD_DESC);
        oprot.writeBool(struct.exclusiveCreate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInitialValue()) {
        oprot.writeFieldBegin(INITIAL_VALUE_FIELD_DESC);
        oprot.writeI64(struct.initialValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinimum()) {
        oprot.writeFieldBegin(MINIMUM_FIELD_DESC);
        oprot.writeI64(struct.minimum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaximum()) {
        oprot.writeFieldBegin(MAXIMUM_FIELD_DESC);
        oprot.writeI64(struct.maximum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWrap()) {
        oprot.writeFieldBegin(WRAP_FIELD_DESC);
        oprot.writeBool(struct.wrap);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSequenceConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSequenceConfigTupleScheme getScheme() {
      return new TSequenceConfigTupleScheme();
    }
  }

  private static class TSequenceConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSequenceConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSequenceConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAllowCreate()) {
        optionals.set(0);
      }
      if (struct.isSetAutoCommitNoSync()) {
        optionals.set(1);
      }
      if (struct.isSetCacheSize()) {
        optionals.set(2);
      }
      if (struct.isSetDecrement()) {
        optionals.set(3);
      }
      if (struct.isSetExclusiveCreate()) {
        optionals.set(4);
      }
      if (struct.isSetInitialValue()) {
        optionals.set(5);
      }
      if (struct.isSetMinimum()) {
        optionals.set(6);
      }
      if (struct.isSetMaximum()) {
        optionals.set(7);
      }
      if (struct.isSetWrap()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAllowCreate()) {
        oprot.writeBool(struct.allowCreate);
      }
      if (struct.isSetAutoCommitNoSync()) {
        oprot.writeBool(struct.autoCommitNoSync);
      }
      if (struct.isSetCacheSize()) {
        oprot.writeI32(struct.cacheSize);
      }
      if (struct.isSetDecrement()) {
        oprot.writeBool(struct.decrement);
      }
      if (struct.isSetExclusiveCreate()) {
        oprot.writeBool(struct.exclusiveCreate);
      }
      if (struct.isSetInitialValue()) {
        oprot.writeI64(struct.initialValue);
      }
      if (struct.isSetMinimum()) {
        oprot.writeI64(struct.minimum);
      }
      if (struct.isSetMaximum()) {
        oprot.writeI64(struct.maximum);
      }
      if (struct.isSetWrap()) {
        oprot.writeBool(struct.wrap);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSequenceConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.allowCreate = iprot.readBool();
        struct.setAllowCreateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.autoCommitNoSync = iprot.readBool();
        struct.setAutoCommitNoSyncIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cacheSize = iprot.readI32();
        struct.setCacheSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.decrement = iprot.readBool();
        struct.setDecrementIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exclusiveCreate = iprot.readBool();
        struct.setExclusiveCreateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.initialValue = iprot.readI64();
        struct.setInitialValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.minimum = iprot.readI64();
        struct.setMinimumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maximum = iprot.readI64();
        struct.setMaximumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.wrap = iprot.readBool();
        struct.setWrapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

