--- Makefile.in
+++ Makefile.in
@@ -23,20 +23,26 @@ TOP = @abs_srcdir@
 BCC = @BUILD_CC@ @BUILD_CFLAGS@
 
 # TCC is the C Compile and options for use in building executables that 
 # will run on the target platform.  (BCC and TCC are usually the
 # same unless your are cross-compiling.)  Separate CC and CFLAGS macros
 # are provide so that these aspects of the build process can be changed
 # on the "make" command-line.  Ex:  "make CC=clang CFLAGS=-fsanitize=undefined"
 #
+# When building BDB SQL, the current build folder(-I.) is where we build the 
+# BDB library. e.g., build_unix or build_windows. Some BDB header files like 
+# db.h or db_int.h are found there. 
+# We also add BDB src/ folder(-I${TOP}/../../../src) into the search path. 
+# This is where BDB internal header files are found. For example, dbinc/crypto.h. 
+#
 CC = @CC@
 CFLAGS = @CPPFLAGS@ @CFLAGS@
 TCC = ${CC} ${CFLAGS} -I. -I${TOP}/src -I${TOP}/../adapter -I${TOP}/ext/rtree -I${TOP}/ext/icu
-TCC += -I${TOP}/ext/fts3 -I${TOP}/ext/async -I${TOP}/ext/session
+TCC += -I${TOP}/ext/fts3 -I${TOP}/ext/async -I${TOP}/ext/session -I${TOP}/../../../src
 
 # Define this for the autoconf-based build, so that the code knows it can
 # include the generated config.h
 # 
 TCC += -D_HAVE_SQLITE_CONFIG_H -DBUILD_sqlite
 
 # Define -DNDEBUG to compile without debugging (i.e., for production usage)
 # Omitting the define will cause extra debugging code to be inserted and
@@ -178,17 +184,17 @@ LIBOBJS0 = alter.lo analyze.lo attach.lo
          main.lo malloc.lo mem0.lo mem1.lo mem2.lo mem3.lo mem5.lo \
          memjournal.lo \
          mutex.lo mutex_noop.lo mutex_unix.lo mutex_w32.lo \
          notify.lo opcodes.lo os.lo os_unix.lo os_win.lo \
          pager.lo parse.lo pcache.lo pcache1.lo pragma.lo prepare.lo printf.lo \
          random.lo resolve.lo rowset.lo rtree.lo \
          sqlite3session.lo select.lo sqlite3rbu.lo status.lo \
          table.lo threads.lo tokenize.lo treeview.lo trigger.lo \
-         update.lo util.lo vacuum.lo \
+         userauth.lo update.lo util.lo vacuum.lo \
          vdbe.lo vdbeapi.lo vdbeaux.lo vdbeblob.lo vdbemem.lo vdbesort.lo \
          vdbetrace.lo wal.lo walker.lo where.lo wherecode.lo whereexpr.lo \
          utf.lo vtab.lo
 
 # Object files for the amalgamation.
 #
 LIBOBJS1 = sqlite3.lo
 
@@ -350,16 +356,20 @@ SRC += \
 SRC += \
   $(TOP)/ext/session/sqlite3session.c \
   $(TOP)/ext/session/sqlite3session.h
 SRC += \
   $(TOP)/ext/rbu/sqlite3rbu.h \
   $(TOP)/ext/rbu/sqlite3rbu.c
 SRC += \
   $(TOP)/ext/misc/json1.c
+SRC += \
+  $(TOP)/ext/userauth/sqlite3userauth.h \
+  $(TOP)/../adapter/userauth.h \
+  $(TOP)/../adapter/userauth.c
 
 # Generated source code files
 #
 SRC += \
   keywordhash.h \
   opcodes.c \
   opcodes.h \
   parse.c \
@@ -534,16 +544,19 @@ EXTHDR += \
   $(TOP)/ext/fts3/fts3_hash.h \
   $(TOP)/ext/fts3/fts3_tokenizer.h
 EXTHDR += \
   $(TOP)/ext/rtree/rtree.h
 EXTHDR += \
   $(TOP)/ext/icu/sqliteicu.h
 EXTHDR += \
   $(TOP)/ext/rtree/sqlite3rtree.h
+EXTHDR += \
+  $(TOP)/ext/userauth/sqlite3userauth.h \
+  $(TOP)/../adapter/userauth.h
 
 # executables needed for testing
 #
 TESTPROGS = \
   testfixture$(TEXE) \
   sqlite3$(TEXE) \
   sqlite3_analyzer$(TEXE) \
   sqldiff$(TEXE) \
@@ -1049,16 +1062,19 @@ rtree.lo:	$(TOP)/ext/rtree/rtree.c $(HDR
 	$(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/ext/rtree/rtree.c
 
 sqlite3session.lo:	$(TOP)/ext/session/sqlite3session.c $(HDR) $(EXTHDR)
 	$(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/ext/session/sqlite3session.c
 
 json1.lo:	$(TOP)/ext/misc/json1.c
 	$(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/ext/misc/json1.c
 
+userauth.lo:	$(TOP)/../adapter/userauth.c $(HDR) $(EXTHDR)
+	$(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/../adapter/userauth.c
+
 # FTS5 things
 #
 FTS5_SRC = \
    $(TOP)/ext/fts5/fts5.h \
    $(TOP)/ext/fts5/fts5Int.h \
    $(TOP)/ext/fts5/fts5_aux.c \
    $(TOP)/ext/fts5/fts5_buffer.c \
    $(TOP)/ext/fts5/fts5_main.c \
--- ext/userauth/sqlite3userauth.h
+++ ext/userauth/sqlite3userauth.h
@@ -14,17 +14,37 @@
 ** user-authentication extension feature.
 **
 ** To compile with the user-authentication feature, append this file to
 ** end of an SQLite amalgamation header file ("sqlite3.h"), then add
 ** the SQLITE_USER_AUTHENTICATION compile-time option.  See the
 ** user-auth.txt file in the same source directory as this file for
 ** additional information.
 */
+#ifndef _SQLITE3USERAUTH_H_
+#define _SQLITE3USERAUTH_H_
+
 #ifdef SQLITE_USER_AUTHENTICATION
+#undef SQLITE_USER_AUTHENTICATION
+#endif
+
+#if defined(BDBSQL_USER_AUTHENTICATION) || \
+ defined(BDBSQL_USER_AUTHENTICATION_KEYSTORE)
+#define SQLITE_USER_AUTHENTICATION 1
+#endif
+
+#if defined(SQLITE_USER_AUTHENTICATION) && !defined(SQLITE_HAS_CODEC)
+#error Encryption is required when authentication is enabled.
+#endif
+
+#if defined(BDBSQL_USER_AUTHENTICATION_KEYSTORE) && !defined(SQLITE_HAS_CODEC)
+#undef BDBSQL_USER_AUTHENTICATION_KEYSTORE
+#endif
+
+#ifdef SQLITE_USER_AUTHENTICATION
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 /*
 ** If a database contains the SQLITE_USER table, then the
 ** sqlite3_user_authenticate() interface must be invoked with an
@@ -89,8 +109,10 @@
   const char *zUsername  /* Username to remove */
 );
 
 #ifdef __cplusplus
 }  /* end of the 'extern "C"' block */
 #endif
 
 #endif /* SQLITE_USER_AUTHENTICATION */
+
+#endif  /* ifndef _SQLITE3USERAUTH_H_ */
--- ext/userauth/userauth.c
+++ ext/userauth/userauth.c
@@ -142,44 +142,48 @@ void sqlite3UserAuthInit(sqlite3 *db){
 }
 
 /*
 ** Implementation of the sqlite_crypt(X,Y) function.
 **
 ** If Y is NULL then generate a new hash for password X and return that
 ** hash.  If Y is not null, then generate a hash for password X using the
 ** same salt as the previous hash Y and return the new hash.
+**
+** Note: SQLite uses a simple Ceasar-cypher to compute hash value of passwords.
+** In Berkeley DB we replace this with a stronger password hash function. The 
+** hashed password was stored as 84 bytes(64 bytes of salt + 20 bytes of HMAC).
 */
+#include "dbinc/hmac.h"
 void sqlite3CryptFunc(
   sqlite3_context *context,
   int NotUsed,
   sqlite3_value **argv
 ){
   const char *zIn;
-  int nIn, ii;
+  int nIn, nOut;
   u8 *zOut;
-  char zSalt[8];
+  char zSalt[HMAC_BLOCK_SIZE];
   zIn = sqlite3_value_blob(argv[0]);
   nIn = sqlite3_value_bytes(argv[0]);
+  nOut = HMAC_OUTPUT_SIZE+sizeof(zSalt);
   if( sqlite3_value_type(argv[1])==SQLITE_BLOB
-   && sqlite3_value_bytes(argv[1])==nIn+sizeof(zSalt)
+    && sqlite3_value_bytes(argv[1])==nOut
   ){
     memcpy(zSalt, sqlite3_value_blob(argv[1]), sizeof(zSalt));
   }else{
     sqlite3_randomness(sizeof(zSalt), zSalt);
   }
-  zOut = sqlite3_malloc( nIn+sizeof(zSalt) );
+  zOut = sqlite3_malloc( nOut );
   if( zOut==0 ){
     sqlite3_result_error_nomem(context);
   }else{
     memcpy(zOut, zSalt, sizeof(zSalt));
-    for(ii=0; ii<nIn; ii++){
-      zOut[ii+sizeof(zSalt)] = zIn[ii]^zSalt[ii&0x7];
-    }
-    sqlite3_result_blob(context, zOut, nIn+sizeof(zSalt), sqlite3_free);
+    __db_chksum(NULL, zIn, nIn, zSalt, zOut+sizeof(zSalt));
+    sqlite3_result_blob(context, zOut, nOut, sqlite3_free);
   }
 }
 
 /*
 ** If a database contains the SQLITE_USER table, then the
 ** sqlite3_user_authenticate() interface must be invoked with an
 ** appropriate username and password prior to enable read and write
 ** access to the database.
--- src/shell.c
+++ src/shell.c
@@ -56,19 +56,16 @@
 #include "config.h"
 #endif

 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
 #include <assert.h>
 #include "sqlite3.h"
-#if SQLITE_USER_AUTHENTICATION
-# include "sqlite3userauth.h"
-#endif
 #include <ctype.h>
 #include <stdarg.h>
 
 #if !defined(_WIN32) && !defined(WIN32)
 # include <signal.h>
 # if !defined(__RTP__) && !defined(_WRS_KERNEL)
 #  include <pwd.h>
 # endif
--- src/sqliteInt.h
+++ src/sqliteInt.h
@@ -703,20 +706,39 @@
 #  define INT8_TYPE signed char
 # endif
 #endif
 #ifndef LONGDOUBLE_TYPE
 # define LONGDOUBLE_TYPE long double
 #endif
 typedef sqlite_int64 i64;          /* 8-byte signed integer */
 typedef sqlite_uint64 u64;         /* 8-byte unsigned integer */
+
+/*
+ * The types of u8/u16/u32 are defined both in SQLite code and BDB code. To 
+ * avoid the "redefinition of typedef" compile error, we use the macros of 
+ * U8_TYPE_DEFINED/U16_TYPE_DEFINED/U32_TYPE_DEFINED as below.
+ */
+#ifndef U32_TYPE_DEFINED
 typedef UINT32_TYPE u32;           /* 4-byte unsigned integer */
+#define U32_TYPE_DEFINED
+#endif
+
+#ifndef U16_TYPE_DEFINED
 typedef UINT16_TYPE u16;           /* 2-byte unsigned integer */
+#define U16_TYPE_DEFINED
+#endif
+
 typedef INT16_TYPE i16;            /* 2-byte signed integer */
+
+#ifndef U8_TYPE_DEFINED
 typedef UINT8_TYPE u8;             /* 1-byte unsigned integer */
+#define U8_TYPE_DEFINED
+#endif
+
 typedef INT8_TYPE i8;              /* 1-byte signed integer */
 
 /*
 ** SQLITE_MAX_U32 is a u64 constant that is the maximum u64 value
 ** that can be stored in a u32 without loss of data.  The value
 ** is 0x00000000ffffffff.  But because of quirks of some compilers, we
 ** have to specify the value in the less intuitive manner shown:
 */
--- src/test1.c
+++ src/test1.c
@@ -7121,17 +7121,16 @@ static int SQLITE_TCLAPI sorter_test_sor
   return TCL_OK;
  sql_error:
   Tcl_AppendResult(interp, "sql error: ", sqlite3_errmsg(db), 0);
   return TCL_ERROR;
 }
 
 
 #ifdef SQLITE_USER_AUTHENTICATION
-#include "sqlite3userauth.h"
 /*
 ** tclcmd:  sqlite3_user_authenticate DB USERNAME PASSWORD
 */
 static int SQLITE_TCLAPI test_user_authenticate(
   ClientData clientData, /* Unused */
   Tcl_Interp *interp,    /* The TCL interpreter that invoked this command */
   int objc,              /* Number of arguments */
   Tcl_Obj *CONST objv[]  /* Command arguments */
--- src/test_config.c
+++ src/test_config.c
@@ -691,16 +691,22 @@ Tcl_SetVar2(interp, "sqlite_options", "m
 #endif
 
 #ifdef SQLITE_USER_AUTHENTICATION
   Tcl_SetVar2(interp, "sqlite_options", "userauth", "1", TCL_GLOBAL_ONLY);
 #else
   Tcl_SetVar2(interp, "sqlite_options", "userauth", "0", TCL_GLOBAL_ONLY);
 #endif
 
+#ifdef BDBSQL_USER_AUTHENTICATION_KEYSTORE
+  Tcl_SetVar2(interp, "sqlite_options", "userauth_keystore", "1", TCL_GLOBAL_ONLY);
+#else
+  Tcl_SetVar2(interp, "sqlite_options", "userauth_keystore", "0", TCL_GLOBAL_ONLY);
+#endif
+
 #ifdef SQLITE_MULTIPLEX_EXT_OVWR
   Tcl_SetVar2(interp, "sqlite_options", "multiplex_ext_overwrite", "1", TCL_GLOBAL_ONLY);
 #else
   Tcl_SetVar2(interp, "sqlite_options", "multiplex_ext_overwrite", "0", TCL_GLOBAL_ONLY);
 #endif
 
 #ifdef YYTRACKMAXSTACKDEPTH
   Tcl_SetVar2(interp, "sqlite_options", "yytrackmaxstackdepth", "1", TCL_GLOBAL_ONLY);
--- test/userauth01.test
+++ test/userauth01.test
@@ -26,20 +26,22 @@ ifcapable !userauth {
 do_execsql_test userauth01-1.0 {
   CREATE TABLE t1(x);
   INSERT INTO t1 VALUES(1),(2.5),('three'),(x'4444'),(NULL);
   SELECT quote(x) FROM t1 ORDER BY x;
   SELECT name FROM sqlite_master;
 } {NULL 1 2.5 'three' X'4444' t1}
 
 # Calling sqlite3_user_authenticate() on a no-authentication-required
-# database connection is a harmless no-op.  
+# database connection is an error.
 #
-do_test userauth01-1.1 {
+do_test userauth01-1.1.1 {
   sqlite3_user_authenticate db alice pw-4-alice
+} {SQLITE_AUTH}
+do_test userauth01-1.1.2 {
   execsql {
     SELECT quote(x) FROM t1 ORDER BY x;
     SELECT name FROM sqlite_master;
   }
 } {NULL 1 2.5 'three' X'4444' t1}
 
 # If sqlite3_user_add(D,U,P,N,A) is called on a no-authentication-required
 # database and A is false, then the call fails with an SQLITE_AUTH error.
@@ -202,17 +204,17 @@ do_test userauth01-1.51 {
 } {alice 1 cindy 0 david 0}
 
 # When ATTACH-ing new database files to a connection, each newly attached
 # database that is an authentication-required database is checked using
 # the same username and password as supplied to the main database.  If that
 # check fails, then the ATTACH command fails with an SQLITE_AUTH error.
 #
 do_test userauth01-1.60 {
-  forcedelete test3.db
+  forcedelete test3.db test3.db-journal
   sqlite3 db3 test3.db
   sqlite3_user_add db3 alice xyzzy-alice 1
 } {SQLITE_OK}
 do_test userauth01-1.61 {
   db3 eval {
     CREATE TABLE t3(a,b,c); INSERT INTO t3 VALUES(1,2,3);
     SELECT * FROM t3;
   }
--- tool/mksqlite3c.tcl
+++ tool/mksqlite3c.tcl
@@ -113,19 +113,21 @@ foreach hdr {
    parse.h
    pcache.h
    pragma.h
    rtree.h
    sqlite3session.h
    sqlite3.h
    sqlite3ext.h
    sqlite3rbu.h
+   sqlite3userauth.h
    sqliteicu.h
    sqliteInt.h
    sqliteLimit.h
+   userauth.h
    vdbe.h
    vdbeInt.h
    vxworks.h
    wal.h
    whereInt.h
 } {
   set available_hdr($hdr) 1
 }
@@ -388,13 +394,14 @@ foreach file {
    rtree.c
    icu.c
    fts3_icu.c
    sqlite3rbu.c
    dbstat.c
    sqlite3session.c
    json1.c
    fts5.c
+   userauth.c
 } {
   copy_file tsrc/$file
 }
 
 close $out
--- tool/mksqlite3h.tcl
+++ tool/mksqlite3h.tcl
@@ -84,16 +84,17 @@ set declpattern3 \
 # Force the output to use unix line endings, even on Windows.
 fconfigure stdout -translation lf
 
 set filelist [subst {
   $TOP/src/sqlite.h.in
   $TOP/ext/rtree/sqlite3rtree.h
   $TOP/ext/session/sqlite3session.h
   $TOP/ext/fts5/fts5.h
+  $TOP/ext/userauth/sqlite3userauth.h
 }]
 
 # These are the functions that accept a variable number of arguments.  They
 # always need to use the "cdecl" calling convention even when another calling
 # convention (e.g. "stcall") is being used for the rest of the library.
 set cdecllist {
   sqlite3_config
   sqlite3_db_config
