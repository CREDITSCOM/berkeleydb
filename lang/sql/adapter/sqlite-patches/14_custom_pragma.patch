--- Makefile.in
+++ Makefile.in
@@ -161,18 +161,18 @@ LTINSTALL = $(LIBTOOL) --mode=install $(
 ###############################################################################
 
 USE_AMALGAMATION = @USE_AMALGAMATION@
 
 # Object files for the SQLite library (non-amalgamation).
 #
 LIBOBJS0 = alter.lo analyze.lo attach.lo auth.lo \
          backup.lo bitvec.lo btmutex.lo btree.lo build.lo \
-         callback.lo complete.lo ctime.lo date.lo dbstat.lo delete.lo \
-         expr.lo fault.lo fkey.lo \
+         callback.lo complete.lo ctime.lo date.lo dbstat.lo db_pragma.lo \
+         delete.lo expr.lo fault.lo fkey.lo \
          fts3.lo fts3_aux.lo fts3_expr.lo fts3_hash.lo fts3_icu.lo \
          fts3_porter.lo fts3_snippet.lo fts3_tokenizer.lo fts3_tokenizer1.lo \
          fts3_tokenize_vtab.lo \
          fts3_unicode.lo fts3_unicode2.lo fts3_write.lo \
 	 fts5.lo \
          func.lo global.lo hash.lo \
          icu.lo insert.lo json1.lo legacy.lo loadext.lo \
          main.lo malloc.lo mem0.lo mem1.lo mem2.lo mem3.lo mem5.lo \
@@ -211,16 +211,17 @@ SRC = \
   $(TOP)/src/btree.h \
   $(TOP)/../adapter/btreeInt.h \
   $(TOP)/src/build.c \
   $(TOP)/src/callback.c \
   $(TOP)/src/complete.c \
   $(TOP)/src/ctime.c \
   $(TOP)/src/date.c \
   $(TOP)/src/dbstat.c \
+  $(TOP)/../adapter/db_pragma.c \
   $(TOP)/src/delete.c \
   $(TOP)/src/expr.c \
   $(TOP)/src/fault.c \
   $(TOP)/src/fkey.c \
   $(TOP)/src/func.c \
   $(TOP)/src/global.c \
   $(TOP)/src/hash.c \
   $(TOP)/src/hash.h \
@@ -740,16 +741,20 @@ ctime.lo:	$(TOP)/src/ctime.c $(HDR)
 	$(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/ctime.c
 
 date.lo:	$(TOP)/src/date.c $(HDR)
 	$(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/date.c
 
 dbstat.lo:	$(TOP)/src/dbstat.c $(HDR)
 	$(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/dbstat.c
 
+db_pragma.lo:	$(TOP)/../adapter/db_pragma.c $(HDR) \
+		$(TOP)/../adapter/btreeInt.h
+	$(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/../adapter/db_pragma.c
+
 delete.lo:	$(TOP)/src/delete.c $(HDR)
 	$(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/delete.c
 
 expr.lo:	$(TOP)/src/expr.c $(HDR)
 	$(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/expr.c
 
 fault.lo:	$(TOP)/src/fault.c $(HDR)
 	$(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/fault.c
--- src/pragma.c
+++ src/pragma.c
@@ -179,17 +179,17 @@ static void setPragmaResultColumnNames(
       sqlite3VdbeSetColName(v, i, COLNAME_NAME, pragCName[j], SQLITE_STATIC);
     }
   }
 }
 
 /*
 ** Generate code to return a single integer value.
 */
-static void returnSingleInt(Vdbe *v, i64 value){
+void returnSingleInt(Vdbe *v, i64 value){
   sqlite3VdbeAddOp4Dup8(v, OP_Int64, 0, 1, 0, (const u8*)&value, P4_INT64);
   sqlite3VdbeAddOp2(v, OP_ResultRow, 1, 1);
 }
 
 /*
 ** Generate code to return a single text value.
 */
 static void returnSingleText(
@@ -290,16 +290,18 @@ static int integrityCheckResultRow(
   int addr;
   sqlite3VdbeAddOp2(v, OP_ResultRow, regResult, 1);
   addr = sqlite3VdbeAddOp3(v, OP_IfPos, 1, sqlite3VdbeCurrentAddr(v)+2, 1);
   VdbeCoverage(v);
   sqlite3VdbeAddOp2(v, OP_Halt, 0, 0);
   return addr;
 }

+extern int bdbsqlPragma(Parse *, char *, char *, int);
+
 /*
 ** Process a pragma statement.  
 **
 ** Pragmas are of this form:
 **
 **      PRAGMA [schema.]id [= value]
 **
 ** The identifier might also be a string.  The value is a string, and
@@ -393,16 +395,21 @@ void sqlite3Pragma(
       sqlite3ErrorMsg(pParse, "%s", aFcntl[0]);
       sqlite3_free(aFcntl[0]);
     }
     pParse->nErr++;
     pParse->rc = rc;
     goto pragma_out;
   }
 
+  if ( bdbsqlPragma(pParse, zLeft, zRight, iDb)==0 ) {
+    /* Do nothing if this was a Berkeley DB specific pragma. */
+    goto pragma_out;
+  }
+
   /* Locate the pragma in the lookup table */
   pPragma = pragmaLocate(zLeft);
   if( pPragma==0 ) goto pragma_out;
 
   /* Make sure the database schema is loaded if the pragma requires that */
   if( (pPragma->mPragFlg & PragFlg_NeedSchema)!=0 ){
     if( sqlite3ReadSchema(pParse) ) goto pragma_out;
   }
--- src/pragma.h
+++ src/pragma.h
@@ -157,17 +157,17 @@ static const PragmaName aPragmaName[] = 
  {/* zName:     */ "busy_timeout",
   /* ePragTyp:  */ PragTyp_BUSY_TIMEOUT,
   /* ePragFlg:  */ PragFlg_Result0,
   /* ColNames:  */ 46, 1,
   /* iArg:      */ 0 },
 #if !defined(SQLITE_OMIT_PAGER_PRAGMAS)
  {/* zName:     */ "cache_size",
   /* ePragTyp:  */ PragTyp_CACHE_SIZE,
-  /* ePragFlg:  */ PragFlg_NeedSchema|PragFlg_Result0|PragFlg_SchemaReq|PragFlg_NoColumns1,
+  /* ePragFlg:  */ 0,
   /* ColNames:  */ 0, 0,
   /* iArg:      */ 0 },
 #endif
 #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)
  {/* zName:     */ "cache_spill",
   /* ePragTyp:  */ PragTyp_CACHE_SPILL,
   /* ePragFlg:  */ PragFlg_Result0|PragFlg_SchemaReq|PragFlg_NoColumns1,
   /* ColNames:  */ 0, 0,
--- tool/mksqlite3c.tcl
+++ tool/mksqlite3c.tcl
@@ -318,16 +318,17 @@ foreach file {
    pcache1.c
    rowset.c
    pager.c
    wal.c
 
    btmutex.c
    btree.c
    backup.c
+   db_pragma.c
 
    vdbemem.c
    vdbeaux.c
    vdbeapi.c
    vdbetrace.c
    vdbe.c
    vdbeblob.c
    vdbesort.c
